THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
15 August 2013 8:49:21 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		fromIndex: 	1
		toIndex: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


AmberRemoteDevelopingServer class>>firstClient
	Receiver: AmberRemoteDevelopingServer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#AmberRemoteDevelopingServer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil
		_mutex: 	a Mutex
		_clients: 	an OrderedCollection()
		_sockets: 	an OrderedCollection()
		workspace: 	a ToolAmberWorkspace


ToolAmberWorkspace class>>openOnFirstClient
	Receiver: ToolAmberWorkspace
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Workspace
		methodDict: 	a MethodDictionary(#addResult:->(ToolAmberWorkspace>>#addResult: "a...etc...
		format: 	152
		instanceVariables: 	#('client')
		organization: 	('as yet unclassified' addResult: doIt initialize printIt yellowB...etc...
		subclasses: 	nil
		name: 	#ToolAmberWorkspace
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil


AmberRemoteDevelopingServer class>>openWorkspace
	Receiver: AmberRemoteDevelopingServer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#AmberRemoteDevelopingServer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil
		_mutex: 	a Mutex
		_clients: 	an OrderedCollection()
		_sockets: 	an OrderedCollection()
		workspace: 	a ToolAmberWorkspace


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace '
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ AmberRemoteDevelopingServer openWorkspace
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(9699328)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace '
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	29@449 corner: 469@616
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	29@449 corner: 469@616
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	29@449 corner: 469@616
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	29@449 corner: 469@616
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 20921) (myDepen...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	29@449 corner: 469@616
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	29@449 corner: 469@616
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	29@449 corner: 469@616
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	29@449 corner: 469@616
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 42)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(968097792)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[418@332 mouseUp 166640890 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	365@329 corner: 502@347
		owner: 	a MenuMorph(961019904)
		submorphs: 	#()
		fullBounds: 	365@329 corner: 502@347
		color: 	Color black
		extension: 	a MorphExtension (978321408)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(968097792)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[418@332 mouseUp 166640890 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	365@329 corner: 502@347
		owner: 	a MenuMorph(961019904)
		submorphs: 	#()
		fullBounds: 	365@329 corner: 502@347
		color: 	Color black
		extension: 	a MorphExtension (978321408)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(968097792)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[418@332 mouseUp 166640890 nil]
	Receiver's instance variables: 
		bounds: 	365@329 corner: 502@347
		owner: 	a MenuMorph(961019904)
		submorphs: 	#()
		fullBounds: 	365@329 corner: 502@347
		color: 	Color black
		extension: 	a MorphExtension (978321408)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(968097792)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
	Receiver's instance variables: 
		bounds: 	365@329 corner: 502@347
		owner: 	a MenuMorph(961019904)
		submorphs: 	#()
		fullBounds: 	365@329 corner: 502@347
		color: 	Color black
		extension: 	a MorphExtension (978321408)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [418@332 mouseUp 166640890 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	166640890
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	418@332
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(968097792)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
	Receiver's instance variables: 
		bounds: 	365@329 corner: 502@347
		owner: 	a MenuMorph(961019904)
		submorphs: 	#()
		fullBounds: 	365@329 corner: 502@347
		color: 	Color black
		extension: 	a MorphExtension (978321408)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		aMorph: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		aMorph: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(968097792)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	365@329 corner: 502@347
		owner: 	a MenuMorph(961019904)
		submorphs: 	#()
		fullBounds: 	365@329 corner: 502@347
		color: 	Color black
		extension: 	a MorphExtension (978321408)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		aMorph: 	a MenuMorph(961019904)
		localEvt: 	[418@332 mouseUp 166640890 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(968097792)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		aMorph: 	a MenuMorph(961019904)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(961019904)
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	360@324 corner: 507@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(968097792)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	360@324 corner: 507@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(968097792)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(961019904)
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
	Receiver's instance variables: 
		bounds: 	360@324 corner: 507@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(968097792)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	360@324 corner: 507@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(968097792)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(961019904)
	Arguments and temporary variables: 
		evt: 	[418@332 mouseUp 166640890 nil]
	Receiver's instance variables: 
		bounds: 	360@324 corner: 507@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(968097792)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	360@324 corner: 507@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(968097792)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(968097792)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		focusHolder: 	a MenuMorph(961019904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	418@332 corner: 434@348
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@332 corner: 434@348
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@332 418@332 mouseMove 166640703 nil]
		targetOffset: 	53@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 166640703 418 332 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(730857472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[418@332 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(730857472) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[418@332 mouseUp 166640890 nil]
		focusHolder: 	a MenuMorph(961019904)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	418@332 corner: 434@348
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	418@332 corner: 434@348
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1040711680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[418@332 418@332 mouseMove 166640703 nil]
		targetOffset: 	53@3
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 166640703 418 332 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
AmberRemoteDevelopingServer class>>firstClient
ToolAmberWorkspace class>>openOnFirstClient
AmberRemoteDevelopingServer class>>openWorkspace
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "openInWorld" is nil
27 August 2013 10:25 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #openInWorld
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	openInWorld
		exception: 	MessageNotUnderstood: receiver of "openInWorld" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ToolAmberInspector>>showInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		window: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace 
Too...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ToolAmberInspector new showInspector
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(44564480)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace 
Too...etc...
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 532903) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace 
ToolAmberInspector...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(641466368)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[106@338 mouseUp 53994478 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	67@329 corner: 204@347
		owner: 	a MenuMorph(634388480)
		submorphs: 	#()
		fullBounds: 	67@329 corner: 204@347
		color: 	Color black
		extension: 	a MorphExtension (651689984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(641466368)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[106@338 mouseUp 53994478 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	67@329 corner: 204@347
		owner: 	a MenuMorph(634388480)
		submorphs: 	#()
		fullBounds: 	67@329 corner: 204@347
		color: 	Color black
		extension: 	a MorphExtension (651689984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(641466368)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[106@338 mouseUp 53994478 nil]
	Receiver's instance variables: 
		bounds: 	67@329 corner: 204@347
		owner: 	a MenuMorph(634388480)
		submorphs: 	#()
		fullBounds: 	67@329 corner: 204@347
		color: 	Color black
		extension: 	a MorphExtension (651689984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(641466368)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
	Receiver's instance variables: 
		bounds: 	67@329 corner: 204@347
		owner: 	a MenuMorph(634388480)
		submorphs: 	#()
		fullBounds: 	67@329 corner: 204@347
		color: 	Color black
		extension: 	a MorphExtension (651689984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [106@338 mouseUp 53994478 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	53994478
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	106@338
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(641466368)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
	Receiver's instance variables: 
		bounds: 	67@329 corner: 204@347
		owner: 	a MenuMorph(634388480)
		submorphs: 	#()
		fullBounds: 	67@329 corner: 204@347
		color: 	Color black
		extension: 	a MorphExtension (651689984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		aMorph: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		aMorph: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(641466368)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	67@329 corner: 204@347
		owner: 	a MenuMorph(634388480)
		submorphs: 	#()
		fullBounds: 	67@329 corner: 204@347
		color: 	Color black
		extension: 	a MorphExtension (651689984)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		aMorph: 	a MenuMorph(634388480)
		localEvt: 	[106@338 mouseUp 53994478 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(641466368)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		aMorph: 	a MenuMorph(634388480)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(634388480)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	62@324 corner: 209@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(641466368)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	62@324 corner: 209@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (649330688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(641466368)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(634388480)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
	Receiver's instance variables: 
		bounds: 	62@324 corner: 209@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(641466368)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	62@324 corner: 209@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (649330688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(641466368)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(634388480)
	Arguments and temporary variables: 
		evt: 	[106@338 mouseUp 53994478 nil]
	Receiver's instance variables: 
		bounds: 	62@324 corner: 209@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(641466368)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	62@324 corner: 209@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (649330688) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(641466368)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(641466368)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		focusHolder: 	a MenuMorph(634388480)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	106@338 corner: 122@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58982400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[106@338 106@338 mouseMove 53994244 nil]
		targetOffset: 	39@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 53994244 106 338 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(819462144) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[106@338 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(819462144) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		focusHolder: 	a MenuMorph(634388480)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	106@338 corner: 122@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58982400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[106@338 106@338 mouseMove 53994244 nil]
		targetOffset: 	39@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 53994244 106 338 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		focusHolder: 	a MenuMorph(634388480)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	106@338 corner: 122@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58982400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[106@338 106@338 mouseMove 53994244 nil]
		targetOffset: 	39@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 53994244 106 338 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
	Receiver's instance variables: 
		bounds: 	106@338 corner: 122@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58982400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[106@338 106@338 mouseMove 53994244 nil]
		targetOffset: 	39@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 53994244 106 338 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[106@338 mouseUp 53994478 nil]
		evt: 	[106@338 mouseUp 53994478 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	106@338 corner: 122@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58982400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[106@338 106@338 mouseMove 53994244 nil]
		targetOffset: 	39@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 53994244 106 338 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[106@338 mouseUp 53994478 nil]
		evtBuf: 	#(1 53994478 106 338 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	106@338 corner: 122@354
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(58982400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[106@338 106@338 mouseMove 53994244 nil]
		targetOffset: 	39@9
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 53994244 106 338 0 0 0 1)
		lastKeyScanCode: 	9
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #openInWorld
ToolAmberInspector>>showInspector
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: LayoutFrame>>left
27 August 2013 10:25:26 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

LayoutFrame(Object)>>doesNotUnderstand: #left
	Receiver: a LayoutFrame
	Arguments and temporary variables: 
		aMessage: 	left
		exception: 	MessageNotUnderstood: LayoutFrame>>left
		resumeValue: 	nil
	Receiver's instance variables: 
		leftFraction: 	0
		leftOffset: 	0
		topFraction: 	0
		topOffset: 	0
		rightFraction: 	1
		rightOffset: 	50
		bottomFraction: 	1
		bottomOffset: 	0


SystemWindow>>addMorph:frame:
	Receiver: a SystemWindow(408158208)
	Arguments and temporary variables: 
		aMorph: 	a PluggableListMorph(74448896)
		relFrame: 	a LayoutFrame
		frame: 	a LayoutFrame
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(397148160) a WindowEdgeGripMorph(2343...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.865 g: 0.86 b: 0.86)
		extension: 	a MorphExtension (486801408)
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.0 g: 0.0 b: 0.0 alpha: 0.498)
		model: 	nil
		slotName: 	nil
		open: 	false
		labelString: 	'Amber inpector'
		stripes: 	an Array(a RectangleMorph(28573696) a RectangleMorph(40370176))
		label: 	a LabelMorph(553648128)'Amber inpector'
		closeBox: 	a MultistateButtonMorph(254279680)
		collapseBox: 	a MultistateButtonMorph(718536704)
		activeOnlyOnTop: 	true
		paneMorphs: 	#()
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(761528320)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(52953088)
		expandBox: 	a MultistateButtonMorph(929824768)
		embeddable: 	nil
		announcer: 	nil


ToolAmberInspector>>buildInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 
		list: 	a PluggableListMorph(74448896)
		text: 	nil
	Receiver's instance variables: 
		window: 	a SystemWindow(408158208)


ToolAmberInspector>>showInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		window: 	a SystemWindow(408158208)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace 
Too...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ToolAmberInspector new showInspector
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(379846656)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace 
Too...etc...
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 559836) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace 
ToolAmberInspector...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 80)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[131@343 mouseUp 54020978 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	68@329 corner: 205@347
		owner: 	a MenuMorph(970194944)
		submorphs: 	#()
		fullBounds: 	68@329 corner: 205@347
		color: 	Color black
		extension: 	a MorphExtension (1042546688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[131@343 mouseUp 54020978 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	68@329 corner: 205@347
		owner: 	a MenuMorph(970194944)
		submorphs: 	#()
		fullBounds: 	68@329 corner: 205@347
		color: 	Color black
		extension: 	a MorphExtension (1042546688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[131@343 mouseUp 54020978 nil]
	Receiver's instance variables: 
		bounds: 	68@329 corner: 205@347
		owner: 	a MenuMorph(970194944)
		submorphs: 	#()
		fullBounds: 	68@329 corner: 205@347
		color: 	Color black
		extension: 	a MorphExtension (1042546688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
	Receiver's instance variables: 
		bounds: 	68@329 corner: 205@347
		owner: 	a MenuMorph(970194944)
		submorphs: 	#()
		fullBounds: 	68@329 corner: 205@347
		color: 	Color black
		extension: 	a MorphExtension (1042546688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [131@343 mouseUp 54020978 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	54020978
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	131@343
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
	Receiver's instance variables: 
		bounds: 	68@329 corner: 205@347
		owner: 	a MenuMorph(970194944)
		submorphs: 	#()
		fullBounds: 	68@329 corner: 205@347
		color: 	Color black
		extension: 	a MorphExtension (1042546688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		aMorph: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		aMorph: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(1032323072)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	68@329 corner: 205@347
		owner: 	a MenuMorph(970194944)
		submorphs: 	#()
		fullBounds: 	68@329 corner: 205@347
		color: 	Color black
		extension: 	a MorphExtension (1042546688)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		aMorph: 	a MenuMorph(970194944)
		localEvt: 	[131@343 mouseUp 54020978 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		aMorph: 	a MenuMorph(970194944)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(970194944)
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	63@324 corner: 210@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	63@324 corner: 210@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (985137152) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(970194944)
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
	Receiver's instance variables: 
		bounds: 	63@324 corner: 210@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	63@324 corner: 210@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (985137152) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(970194944)
	Arguments and temporary variables: 
		evt: 	[131@343 mouseUp 54020978 nil]
	Receiver's instance variables: 
		bounds: 	63@324 corner: 210@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ToggleMenuIt...etc...
		fullBounds: 	63@324 corner: 210@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (985137152) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(1032323072)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(1032323072)'Do it (d)' a ...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		focusHolder: 	a MenuMorph(970194944)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	131@343 corner: 147@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(345243648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[131@343 131@343 mouseMove 54020838 nil]
		targetOffset: 	63@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54020838 131 343 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1050935296) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[131@343 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1050935296) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		focusHolder: 	a MenuMorph(970194944)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	131@343 corner: 147@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(345243648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[131@343 131@343 mouseMove 54020838 nil]
		targetOffset: 	63@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54020838 131 343 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
		focusHolder: 	a MenuMorph(970194944)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	131@343 corner: 147@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(345243648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[131@343 131@343 mouseMove 54020838 nil]
		targetOffset: 	63@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54020838 131 343 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[131@343 mouseUp 54020978 nil]
	Receiver's instance variables: 
		bounds: 	131@343 corner: 147@359
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(345243648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[131@343 131@343 mouseMove 54020838 nil]
		targetOffset: 	63@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54020838 131 343 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil



--- The full stack ---
LayoutFrame(Object)>>doesNotUnderstand: #left
SystemWindow>>addMorph:frame:
ToolAmberInspector>>buildInspector
ToolAmberInspector>>showInspector
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "leftOffset" is nil
27 August 2013 10:35:21 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #leftOffset
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	leftOffset
		exception: 	MessageNotUnderstood: receiver of "leftOffset" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SystemWindow>>addMorph:fullFrame:
	Receiver: a SystemWindow(599785472)
	Arguments and temporary variables: 
		aMorph: 	a PluggableListMorph(832045056)
		aLayoutFrame: 	nil
		left: 	nil
		right: 	nil
		bottom: 	nil
		top: 	nil
		windowBorderWidth: 	4
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(44826624) a WindowEdgeGripMorph(95577...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.865 g: 0.86 b: 0.86)
		extension: 	a MorphExtension (678428672)
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.0 g: 0.0 b: 0.0 alpha: 0.498)
		model: 	nil
		slotName: 	nil
		open: 	false
		labelString: 	'Amber inpector'
		stripes: 	an Array(a RectangleMorph(128974848) a RectangleMorph(140771328))
		label: 	a LabelMorph(745275392)'Amber inpector'
		closeBox: 	a MultistateButtonMorph(354680832)
		collapseBox: 	a MultistateButtonMorph(812908544)
		activeOnlyOnTop: 	true
		paneMorphs: 	#()
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(415236096)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(153354240)
		expandBox: 	a MultistateButtonMorph(1012137984)
		embeddable: 	nil
		announcer: 	nil


ToolAmberInspector>>buildInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 
		list: 	a PluggableListMorph(832045056)
		text: 	nil
	Receiver's instance variables: 
		window: 	a SystemWindow(599785472)


ToolAmberInspector>>showInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		window: 	a SystemWindow(599785472)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'ToolAmberInspector new showInspector'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ToolAmberInspector new showInspector
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(571473920)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'ToolAmberInspector new showInspector'
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 36)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 36)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 1154175) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'ToolAmberInspector new showInspector '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 36)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 36)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'ToolAmberInspector new showInspector '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(794558464)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[339@344 mouseUp 54615603 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	269@329 corner: 406@347
		owner: 	a MenuMorph(787480576)
		submorphs: 	#()
		fullBounds: 	269@329 corner: 406@347
		color: 	Color black
		extension: 	a MorphExtension (804782080)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(794558464)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[339@344 mouseUp 54615603 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	269@329 corner: 406@347
		owner: 	a MenuMorph(787480576)
		submorphs: 	#()
		fullBounds: 	269@329 corner: 406@347
		color: 	Color black
		extension: 	a MorphExtension (804782080)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(794558464)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[339@344 mouseUp 54615603 nil]
	Receiver's instance variables: 
		bounds: 	269@329 corner: 406@347
		owner: 	a MenuMorph(787480576)
		submorphs: 	#()
		fullBounds: 	269@329 corner: 406@347
		color: 	Color black
		extension: 	a MorphExtension (804782080)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(794558464)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
	Receiver's instance variables: 
		bounds: 	269@329 corner: 406@347
		owner: 	a MenuMorph(787480576)
		submorphs: 	#()
		fullBounds: 	269@329 corner: 406@347
		color: 	Color black
		extension: 	a MorphExtension (804782080)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [339@344 mouseUp 54615603 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	54615603
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	339@344
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(794558464)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
	Receiver's instance variables: 
		bounds: 	269@329 corner: 406@347
		owner: 	a MenuMorph(787480576)
		submorphs: 	#()
		fullBounds: 	269@329 corner: 406@347
		color: 	Color black
		extension: 	a MorphExtension (804782080)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		aMorph: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		aMorph: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(794558464)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	269@329 corner: 406@347
		owner: 	a MenuMorph(787480576)
		submorphs: 	#()
		fullBounds: 	269@329 corner: 406@347
		color: 	Color black
		extension: 	a MorphExtension (804782080)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		aMorph: 	a MenuMorph(787480576)
		localEvt: 	[339@344 mouseUp 54615603 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(794558464)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		aMorph: 	a MenuMorph(787480576)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(787480576)
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	264@324 corner: 411@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(794558464)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	264@324 corner: 411@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (802422784) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(794558464)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(787480576)
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
	Receiver's instance variables: 
		bounds: 	264@324 corner: 411@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(794558464)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	264@324 corner: 411@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (802422784) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(794558464)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(787480576)
	Arguments and temporary variables: 
		evt: 	[339@344 mouseUp 54615603 nil]
	Receiver's instance variables: 
		bounds: 	264@324 corner: 411@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(794558464)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	264@324 corner: 411@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (802422784) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(794558464)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(794558464)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		focusHolder: 	a MenuMorph(787480576)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	339@344 corner: 355@360
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	339@344 corner: 355@360
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(461897728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[339@344 mouseUp 54615603 nil]
		targetOffset: 	70@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54615603 339 344 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(791412736) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[339@344 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(791412736) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		focusHolder: 	a MenuMorph(787480576)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	339@344 corner: 355@360
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	339@344 corner: 355@360
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(461897728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[339@344 mouseUp 54615603 nil]
		targetOffset: 	70@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54615603 339 344 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
		focusHolder: 	a MenuMorph(787480576)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	339@344 corner: 355@360
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	339@344 corner: 355@360
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(461897728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[339@344 mouseUp 54615603 nil]
		targetOffset: 	70@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54615603 339 344 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[339@344 mouseUp 54615603 nil]
	Receiver's instance variables: 
		bounds: 	339@344 corner: 355@360
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	339@344 corner: 355@360
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(461897728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[339@344 mouseUp 54615603 nil]
		targetOffset: 	70@15
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54615603 339 344 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #leftOffset
SystemWindow>>addMorph:fullFrame:
ToolAmberInspector>>buildInspector
ToolAmberInspector>>showInspector
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "leftOffset" is nil
27 August 2013 10:36:04 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #leftOffset
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	leftOffset
		exception: 	MessageNotUnderstood: receiver of "leftOffset" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SystemWindow>>addMorph:fullFrame:
	Receiver: a SystemWindow(1050673152)
	Arguments and temporary variables: 
		aMorph: 	a PluggableTextMorph(575668224)
		aLayoutFrame: 	nil
		left: 	nil
		right: 	nil
		bottom: 	nil
		top: 	nil
		windowBorderWidth: 	4
	Receiver's instance variables: 
		bounds: 	0@0 corner: 300@200
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(550764544) a WindowEdgeGripMorph(3879...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.865 g: 0.86 b: 0.86)
		extension: 	a MorphExtension (55574528)
		borderWidth: 	1
		borderColor: 	(TranslucentColor r: 0.0 g: 0.0 b: 0.0 alpha: 0.498)
		model: 	nil
		slotName: 	nil
		open: 	false
		labelString: 	'Amber inpector'
		stripes: 	an Array(a RectangleMorph(634912768) a RectangleMorph(646709248))
		label: 	a LabelMorph(122421248)'Amber inpector'
		closeBox: 	a MultistateButtonMorph(860618752)
		collapseBox: 	a MultistateButtonMorph(245104640)
		activeOnlyOnTop: 	true
		paneMorphs: 	an Array(a PluggableListMorph(258211840))
		collapsedFrame: 	nil
		fullFrame: 	0@0 corner: 300@200
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(921174016)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		allowReframeHandles: 	true
		labelArea: 	an AlignmentMorph(659292160)
		expandBox: 	a MultistateButtonMorph(444334080)
		embeddable: 	nil
		announcer: 	nil


ToolAmberInspector>>buildInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 
		list: 	a PluggableListMorph(258211840)
		text: 	a PluggableTextMorph(575668224)
	Receiver's instance variables: 
		window: 	a SystemWindow(1050673152)


ToolAmberInspector>>showInspector
	Receiver: a ToolAmberInspector
	Arguments and temporary variables: 

	Receiver's instance variables: 
		window: 	a SystemWindow(1050673152)


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'ToolAmberInspector new showInspector '
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ ToolAmberInspector new showInspector
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(1022361600)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'ToolAmberInspector new showInspector '
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 37)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 37)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 1198230) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'ToolAmberInspector new showInspector '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 37)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	52@528 corner: 492@695
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	52@528 corner: 492@695
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 37)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'ToolAmberInspector new showInspector '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(132644864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[361@340 mouseUp 54659213 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	326@329 corner: 463@347
		owner: 	a MenuMorph(70516736)
		submorphs: 	#()
		fullBounds: 	326@329 corner: 463@347
		color: 	Color black
		extension: 	a MorphExtension (142868480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(132644864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[361@340 mouseUp 54659213 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	326@329 corner: 463@347
		owner: 	a MenuMorph(70516736)
		submorphs: 	#()
		fullBounds: 	326@329 corner: 463@347
		color: 	Color black
		extension: 	a MorphExtension (142868480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(132644864)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[361@340 mouseUp 54659213 nil]
	Receiver's instance variables: 
		bounds: 	326@329 corner: 463@347
		owner: 	a MenuMorph(70516736)
		submorphs: 	#()
		fullBounds: 	326@329 corner: 463@347
		color: 	Color black
		extension: 	a MorphExtension (142868480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(132644864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
	Receiver's instance variables: 
		bounds: 	326@329 corner: 463@347
		owner: 	a MenuMorph(70516736)
		submorphs: 	#()
		fullBounds: 	326@329 corner: 463@347
		color: 	Color black
		extension: 	a MorphExtension (142868480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [361@340 mouseUp 54659213 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	54659213
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	361@340
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(132644864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
	Receiver's instance variables: 
		bounds: 	326@329 corner: 463@347
		owner: 	a MenuMorph(70516736)
		submorphs: 	#()
		fullBounds: 	326@329 corner: 463@347
		color: 	Color black
		extension: 	a MorphExtension (142868480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		aMorph: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		aMorph: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(132644864)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	326@329 corner: 463@347
		owner: 	a MenuMorph(70516736)
		submorphs: 	#()
		fullBounds: 	326@329 corner: 463@347
		color: 	Color black
		extension: 	a MorphExtension (142868480)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		aMorph: 	a MenuMorph(70516736)
		localEvt: 	[361@340 mouseUp 54659213 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(132644864)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		aMorph: 	a MenuMorph(70516736)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(70516736)
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	321@324 corner: 468@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(132644864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	321@324 corner: 468@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (85458944) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(132644864)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(70516736)
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
	Receiver's instance variables: 
		bounds: 	321@324 corner: 468@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(132644864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	321@324 corner: 468@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (85458944) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(132644864)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(70516736)
	Arguments and temporary variables: 
		evt: 	[361@340 mouseUp 54659213 nil]
	Receiver's instance variables: 
		bounds: 	321@324 corner: 468@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(132644864)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	321@324 corner: 468@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (85458944) [other:  (basicColor -> (Color r: 0.745 ...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(132644864)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(132644864)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		focusHolder: 	a MenuMorph(70516736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	361@340 corner: 377@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	361@340 corner: 377@356
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422838272)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[361@340 361@340 mouseMove 54659056 nil]
		targetOffset: 	35@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54659056 361 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(55050240) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[361@340 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(55050240) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		focusHolder: 	a MenuMorph(70516736)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	361@340 corner: 377@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	361@340 corner: 377@356
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422838272)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[361@340 361@340 mouseMove 54659056 nil]
		targetOffset: 	35@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54659056 361 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
		focusHolder: 	a MenuMorph(70516736)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	361@340 corner: 377@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	361@340 corner: 377@356
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422838272)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[361@340 361@340 mouseMove 54659056 nil]
		targetOffset: 	35@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54659056 361 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[361@340 mouseUp 54659213 nil]
	Receiver's instance variables: 
		bounds: 	361@340 corner: 377@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	361@340 corner: 377@356
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422838272)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[361@340 361@340 mouseMove 54659056 nil]
		targetOffset: 	35@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54659056 361 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #leftOffset
SystemWindow>>addMorph:fullFrame:
ToolAmberInspector>>buildInspector
ToolAmberInspector>>showInspector
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:38:29 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 1343407 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	1343407
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 1343407
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1343407

SmallInteger>>-
	Receiver: 1343407
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1343407

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		aChar: 	$f
		nextSelection: 	0
		milliSeconds: 	1343407
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 762@606
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	72@189 corner: 762@606
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		event: 	[keystroke 'f']
		aChar: 	$f
		aSpecialKey: 	102
	Receiver's instance variables: 
		bounds: 	72@189 corner: 762@606
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	72@189 corner: 762@606
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 762@606
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	72@189 corner: 762@606
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'f']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(928251904)
	Receiver's instance variables: 
		timeStamp: 	54804103
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	509@630
		handler: 	nil
		wasHandled: 	true
		keyValue: 	102
		charCode: 	102
		scanCode: 	70


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 762@606
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	72@189 corner: 762@606
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 762@606
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	72@189 corner: 762@606
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 762@606
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	72@189 corner: 762@606
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a PluggableListMorph(928251904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	509@630 corner: 525@646
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	509@630 corner: 525@646
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1008992256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[509@630 mouseUp 54804009 nil]
		targetOffset: 	437@21
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54804009 509 630 0 0 3 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(696778752) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(696778752) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a PluggableListMorph(928251904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	509@630 corner: 525@646
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	509@630 corner: 525@646
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1008992256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[509@630 mouseUp 54804009 nil]
		targetOffset: 	437@21
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54804009 509 630 0 0 3 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a PluggableListMorph(928251904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	509@630 corner: 525@646
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	509@630 corner: 525@646
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1008992256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[509@630 mouseUp 54804009 nil]
		targetOffset: 	437@21
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54804009 509 630 0 0 3 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	509@630 corner: 525@646
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	509@630 corner: 525@646
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1008992256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[509@630 mouseUp 54804009 nil]
		targetOffset: 	437@21
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54804009 509 630 0 0 3 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		evt: 	[keystroke 'f']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	509@630 corner: 525@646
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	509@630 corner: 525@646
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1008992256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[509@630 mouseUp 54804009 nil]
		targetOffset: 	437@21
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54804009 509 630 0 0 3 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 'f']
		evtBuf: 	#(2 54804103 102 0 0 102 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	509@630 corner: 525@646
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	509@630 corner: 525@646
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(1008992256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[509@630 mouseUp 54804009 nil]
		targetOffset: 	437@21
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54804009 509 630 0 0 3 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(696778752))(a PreDebu...etc...
		lastStepTime: 	1343386
		lastStepMessage: 	nil
		lastCycleTime: 	1343428
		alarms: 	a Heap()
		lastAlarmTime: 	1343386
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(696778752))(a PreDebu...etc...
		lastStepTime: 	1343386
		lastStepMessage: 	nil
		lastCycleTime: 	1343428
		alarms: 	a Heap()
		lastAlarmTime: 	1343386
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(696778752))(a PreDebu...etc...
		lastStepTime: 	1343386
		lastStepMessage: 	nil
		lastCycleTime: 	1343428
		alarms: 	a Heap()
		lastAlarmTime: 	1343386
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(696778752))(a PreDebu...etc...
		lastStepTime: 	1343386
		lastStepMessage: 	nil
		lastCycleTime: 	1343428
		alarms: 	a Heap()
		lastAlarmTime: 	1343386
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(696778752) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
PluggableListMorph(Morph)>>handleFocusEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:38:36 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 1350618 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	1350618
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 1350618
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1350618

SmallInteger>>-
	Receiver: 1350618
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1350618

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		aChar: 	$d
		nextSelection: 	0
		milliSeconds: 	1350618
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		event: 	[keystroke 'd']
		aChar: 	$d
		aSpecialKey: 	100
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'd']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(928251904)
	Receiver's instance variables: 
		timeStamp: 	54811306
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	367@519
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	68


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a PluggableListMorph(928251904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	367@519 corner: 383@535
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	367@519 corner: 383@535
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150732800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[367@518 367@519 mouseMove 54811228 nil]
		targetOffset: 	74@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54811228 367 519 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(912261120) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(912261120) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a PluggableListMorph(928251904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	367@519 corner: 383@535
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	367@519 corner: 383@535
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150732800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[367@518 367@519 mouseMove 54811228 nil]
		targetOffset: 	74@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54811228 367 519 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a PluggableListMorph(928251904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	367@519 corner: 383@535
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	367@519 corner: 383@535
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150732800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[367@518 367@519 mouseMove 54811228 nil]
		targetOffset: 	74@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54811228 367 519 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	367@519 corner: 383@535
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	367@519 corner: 383@535
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150732800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[367@518 367@519 mouseMove 54811228 nil]
		targetOffset: 	74@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54811228 367 519 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	367@519 corner: 383@535
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	367@519 corner: 383@535
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150732800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[367@518 367@519 mouseMove 54811228 nil]
		targetOffset: 	74@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54811228 367 519 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 54811306 100 0 0 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	367@519 corner: 383@535
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	367@519 corner: 383@535
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(150732800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[367@518 367@519 mouseMove 54811228 nil]
		targetOffset: 	74@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54811228 367 519 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(369360896))(an OBSys...etc...
		lastStepTime: 	1350597
		lastStepMessage: 	nil
		lastCycleTime: 	1350640
		alarms: 	a Heap()
		lastAlarmTime: 	1350597
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(369360896))(an OBSys...etc...
		lastStepTime: 	1350597
		lastStepMessage: 	nil
		lastCycleTime: 	1350640
		alarms: 	a Heap()
		lastAlarmTime: 	1350597
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(369360896))(an OBSys...etc...
		lastStepTime: 	1350597
		lastStepMessage: 	nil
		lastCycleTime: 	1350640
		alarms: 	a Heap()
		lastAlarmTime: 	1350597
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(369360896))(an OBSys...etc...
		lastStepTime: 	1350597
		lastStepMessage: 	nil
		lastCycleTime: 	1350640
		alarms: 	a Heap()
		lastAlarmTime: 	1350597
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(912261120) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
PluggableListMorph(Morph)>>handleFocusEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:38:38 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 1352420 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	1352420
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 1352420
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1352420

SmallInteger>>-
	Receiver: 1352420
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1352420

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		aChar: 	$d
		nextSelection: 	0
		milliSeconds: 	1352420
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		event: 	[keystroke 'd']
		aChar: 	$d
		aSpecialKey: 	100
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'd']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(928251904)
	Receiver's instance variables: 
		timeStamp: 	54813103
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	484@209
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	100
		scanCode: 	68


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		aMorph: 	a PluggableListMorph(928251904)
		localEvt: 	[keystroke 'd']
		index: 	2
		child: 	a TransformMorph(1024458752)
		morphs: 	an Array(a TransformMorph(1024458752))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		aMorph: 	a PluggableListMorph(928251904)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(928251904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	293@81 corner: 983@498
		owner: 	a SystemWindow(671875072)
		submorphs: 	an Array(a TransformMorph(1024458752))
		fullBounds: 	293@81 corner: 983@498
		color: 	Color white
		extension: 	a MorphExtension (372506624) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(957349888)
		scroller: 	a TransformMorph(1024458752)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(981729280)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(868220928)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a PluggableListMorph(928251904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	485@207 corner: 501@223
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	485@207 corner: 501@223
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191627264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[484@209 485@207 mouseMove 54813103 nil]
		targetOffset: 	187@124
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54813103 484 208 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(953155584) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(953155584) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a PluggableListMorph(928251904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	485@207 corner: 501@223
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	485@207 corner: 501@223
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191627264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[484@209 485@207 mouseMove 54813103 nil]
		targetOffset: 	187@124
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54813103 484 208 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a PluggableListMorph(928251904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	485@207 corner: 501@223
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	485@207 corner: 501@223
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191627264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[484@209 485@207 mouseMove 54813103 nil]
		targetOffset: 	187@124
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54813103 484 208 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	485@207 corner: 501@223
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	485@207 corner: 501@223
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191627264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[484@209 485@207 mouseMove 54813103 nil]
		targetOffset: 	187@124
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54813103 484 208 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	485@207 corner: 501@223
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	485@207 corner: 501@223
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191627264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[484@209 485@207 mouseMove 54813103 nil]
		targetOffset: 	187@124
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54813103 484 208 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 54813103 100 0 0 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	485@207 corner: 501@223
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	485@207 corner: 501@223
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(191627264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[484@209 485@207 mouseMove 54813103 nil]
		targetOffset: 	187@124
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 54813103 484 208 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(953155584))(a PreDebu...etc...
		lastStepTime: 	1352399
		lastStepMessage: 	nil
		lastCycleTime: 	1352440
		alarms: 	a Heap()
		lastAlarmTime: 	1352399
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(953155584))(a PreDebu...etc...
		lastStepTime: 	1352399
		lastStepMessage: 	nil
		lastCycleTime: 	1352440
		alarms: 	a Heap()
		lastAlarmTime: 	1352399
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(953155584))(a PreDebu...etc...
		lastStepTime: 	1352399
		lastStepMessage: 	nil
		lastCycleTime: 	1352440
		alarms: 	a Heap()
		lastAlarmTime: 	1352399
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(953155584))(a PreDebu...etc...
		lastStepTime: 	1352399
		lastStepMessage: 	nil
		lastCycleTime: 	1352440
		alarms: 	a Heap()
		lastAlarmTime: 	1352399
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(953155584) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:46:13 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 1807323 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	1807323
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 1807323
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1807323

SmallInteger>>-
	Receiver: 1807323
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
1807323

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(632029184)
	Arguments and temporary variables: 
		aChar: 	$f
		nextSelection: 	0
		milliSeconds: 	1807323
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(375652352)
		submorphs: 	an Array(a TransformMorph(688914432))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (34603008) [locked]  [other:  (selectionColor -> (C...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(661127168)
		scroller: 	a TransformMorph(688914432)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(685506560)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(532676608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(632029184)
	Arguments and temporary variables: 
		event: 	[keystroke 'f']
		aChar: 	$f
		aSpecialKey: 	102
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(375652352)
		submorphs: 	an Array(a TransformMorph(688914432))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (34603008) [locked]  [other:  (selectionColor -> (C...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(661127168)
		scroller: 	a TransformMorph(688914432)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(685506560)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(532676608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(632029184)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(375652352)
		submorphs: 	an Array(a TransformMorph(688914432))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (34603008) [locked]  [other:  (selectionColor -> (C...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(661127168)
		scroller: 	a TransformMorph(688914432)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(685506560)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(532676608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'f']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(632029184)
	Receiver's instance variables: 
		timeStamp: 	55268009
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	515@312
		handler: 	nil
		wasHandled: 	true
		keyValue: 	102
		charCode: 	102
		scanCode: 	70


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(632029184)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(375652352)
		submorphs: 	an Array(a TransformMorph(688914432))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (34603008) [locked]  [other:  (selectionColor -> (C...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(661127168)
		scroller: 	a TransformMorph(688914432)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(685506560)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(532676608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableListMorph(632029184)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(375652352)
		submorphs: 	an Array(a TransformMorph(688914432))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (34603008) [locked]  [other:  (selectionColor -> (C...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(661127168)
		scroller: 	a TransformMorph(688914432)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(685506560)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(532676608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(632029184)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(375652352)
		submorphs: 	an Array(a TransformMorph(688914432))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (34603008) [locked]  [other:  (selectionColor -> (C...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(661127168)
		scroller: 	a TransformMorph(688914432)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(685506560)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(532676608)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a PluggableListMorph(632029184)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	515@312 corner: 531@328
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	515@312 corner: 531@328
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(21495808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[515@312 mouseUp 55267916 nil]
		targetOffset: 	443@123
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55267916 515 312 0 0 2 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(783024128) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(783024128) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a PluggableListMorph(632029184)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	515@312 corner: 531@328
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	515@312 corner: 531@328
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(21495808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[515@312 mouseUp 55267916 nil]
		targetOffset: 	443@123
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55267916 515 312 0 0 2 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		focusHolder: 	a PluggableListMorph(632029184)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	515@312 corner: 531@328
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	515@312 corner: 531@328
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(21495808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[515@312 mouseUp 55267916 nil]
		targetOffset: 	443@123
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55267916 515 312 0 0 2 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
	Receiver's instance variables: 
		bounds: 	515@312 corner: 531@328
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	515@312 corner: 531@328
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(21495808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[515@312 mouseUp 55267916 nil]
		targetOffset: 	443@123
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55267916 515 312 0 0 2 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'f']
		evt: 	[keystroke 'f']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	515@312 corner: 531@328
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	515@312 corner: 531@328
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(21495808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[515@312 mouseUp 55267916 nil]
		targetOffset: 	443@123
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55267916 515 312 0 0 2 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 'f']
		evtBuf: 	#(2 55268009 102 0 0 102 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	515@312 corner: 531@328
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	515@312 corner: 531@328
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(21495808)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[515@312 mouseUp 55267916 nil]
		targetOffset: 	443@123
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55267916 515 312 0 0 2 1)
		lastKeyScanCode: 	70
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(783024128))(a PreDebu...etc...
		lastStepTime: 	1807303
		lastStepMessage: 	nil
		lastCycleTime: 	1807343
		alarms: 	a Heap()
		lastAlarmTime: 	1807303
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(783024128))(a PreDebu...etc...
		lastStepTime: 	1807303
		lastStepMessage: 	nil
		lastCycleTime: 	1807343
		alarms: 	a Heap()
		lastAlarmTime: 	1807303
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(783024128))(a PreDebu...etc...
		lastStepTime: 	1807303
		lastStepMessage: 	nil
		lastCycleTime: 	1807343
		alarms: 	a Heap()
		lastAlarmTime: 	1807303
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(783024128))(a PreDebu...etc...
		lastStepTime: 	1807303
		lastStepMessage: 	nil
		lastCycleTime: 	1807343
		alarms: 	a Heap()
		lastAlarmTime: 	1807303
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(783024128) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
PluggableListMorph(Morph)>>handleFocusEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:51:04 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	2097954
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

SmallInteger>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		aChar: 	$s
		nextSelection: 	0
		milliSeconds: 	2097954
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		event: 	[keystroke 's']
		aChar: 	$s
		aSpecialKey: 	115
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 's']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		timeStamp: 	55558650
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	300@307
		handler: 	nil
		wasHandled: 	true
		keyValue: 	115
		charCode: 	115
		scanCode: 	83


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
		localEvt: 	[keystroke 's']
		index: 	2
		child: 	a TransformMorph(888143872)
		morphs: 	an Array(a TransformMorph(888143872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	300@307 corner: 316@323
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305135616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@307 mouseUp 55558509 nil]
		targetOffset: 	228@118
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55558509 300 307 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1008730112) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1008730112) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	300@307 corner: 316@323
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305135616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@307 mouseUp 55558509 nil]
		targetOffset: 	228@118
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55558509 300 307 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	300@307 corner: 316@323
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305135616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@307 mouseUp 55558509 nil]
		targetOffset: 	228@118
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55558509 300 307 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	300@307 corner: 316@323
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305135616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@307 mouseUp 55558509 nil]
		targetOffset: 	228@118
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55558509 300 307 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	300@307 corner: 316@323
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305135616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@307 mouseUp 55558509 nil]
		targetOffset: 	228@118
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55558509 300 307 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
		evtBuf: 	#(2 55558650 115 0 0 115 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	300@307 corner: 316@323
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305135616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[300@307 mouseUp 55558509 nil]
		targetOffset: 	228@118
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55558509 300 307 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1008730112))(a PreDeb...etc...
		lastStepTime: 	2097934
		lastStepMessage: 	nil
		lastCycleTime: 	2097974
		alarms: 	a Heap()
		lastAlarmTime: 	2097934
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1008730112))(a PreDeb...etc...
		lastStepTime: 	2097934
		lastStepMessage: 	nil
		lastCycleTime: 	2097974
		alarms: 	a Heap()
		lastAlarmTime: 	2097934
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1008730112))(a PreDeb...etc...
		lastStepTime: 	2097934
		lastStepMessage: 	nil
		lastCycleTime: 	2097974
		alarms: 	a Heap()
		lastAlarmTime: 	2097934
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1008730112))(a PreDeb...etc...
		lastStepTime: 	2097934
		lastStepMessage: 	nil
		lastCycleTime: 	2097974
		alarms: 	a Heap()
		lastAlarmTime: 	2097934
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1008730112) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:51:32 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	2097954
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

SmallInteger>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		aChar: 	$s
		nextSelection: 	0
		milliSeconds: 	2097954
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		event: 	[keystroke 's']
		aChar: 	$s
		aSpecialKey: 	115
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 's']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		timeStamp: 	55558650
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	300@307
		handler: 	nil
		wasHandled: 	true
		keyValue: 	115
		charCode: 	115
		scanCode: 	83


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
		localEvt: 	[keystroke 's']
		index: 	2
		child: 	a TransformMorph(888143872)
		morphs: 	an Array(a TransformMorph(888143872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	114@205 corner: 130@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	114@205 corner: 130@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(417333248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[114@205 mouseUp 55586650 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55586650 114 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(631767040) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(631767040) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	114@205 corner: 130@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	114@205 corner: 130@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(417333248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[114@205 mouseUp 55586650 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55586650 114 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	114@205 corner: 130@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	114@205 corner: 130@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(417333248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[114@205 mouseUp 55586650 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55586650 114 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	114@205 corner: 130@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	114@205 corner: 130@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(417333248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[114@205 mouseUp 55586650 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55586650 114 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	114@205 corner: 130@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	114@205 corner: 130@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(417333248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[114@205 mouseUp 55586650 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55586650 114 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
		evtBuf: 	#(2 55558650 115 0 0 115 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	114@205 corner: 130@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	114@205 corner: 130@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(417333248)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[114@205 mouseUp 55586650 nil]
		targetOffset: 	21@14
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55586650 114 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1043070976))(an Ov...etc...
		lastStepTime: 	2125943
		lastStepMessage: 	nil
		lastCycleTime: 	2125984
		alarms: 	a Heap()
		lastAlarmTime: 	2125943
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1043070976))(an Ov...etc...
		lastStepTime: 	2125943
		lastStepMessage: 	nil
		lastCycleTime: 	2125984
		alarms: 	a Heap()
		lastAlarmTime: 	2125943
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1043070976))(an Ov...etc...
		lastStepTime: 	2125943
		lastStepMessage: 	nil
		lastCycleTime: 	2125984
		alarms: 	a Heap()
		lastAlarmTime: 	2125943
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(1043070976))(an Ov...etc...
		lastStepTime: 	2125943
		lastStepMessage: 	nil
		lastCycleTime: 	2125984
		alarms: 	a Heap()
		lastAlarmTime: 	2125943
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(631767040) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:51:33 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	2097954
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

SmallInteger>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		aChar: 	$s
		nextSelection: 	0
		milliSeconds: 	2097954
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		event: 	[keystroke 's']
		aChar: 	$s
		aSpecialKey: 	115
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 's']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		timeStamp: 	55558650
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	300@307
		handler: 	nil
		wasHandled: 	true
		keyValue: 	115
		charCode: 	115
		scanCode: 	83


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
		localEvt: 	[keystroke 's']
		index: 	2
		child: 	a TransformMorph(888143872)
		morphs: 	an Array(a TransformMorph(888143872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55587650 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55587650 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(336068608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(336068608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55587650 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55587650 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55587650 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55587650 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55587650 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55587650 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55587650 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55587650 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
		evtBuf: 	#(2 55558650 115 0 0 115 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(648544256)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55587650 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55587650 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(336068608))(a PreDebu...etc...
		lastStepTime: 	2126941
		lastStepMessage: 	nil
		lastCycleTime: 	2126981
		alarms: 	a Heap()
		lastAlarmTime: 	2126941
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(336068608))(a PreDebu...etc...
		lastStepTime: 	2126941
		lastStepMessage: 	nil
		lastCycleTime: 	2126981
		alarms: 	a Heap()
		lastAlarmTime: 	2126941
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(336068608))(a PreDebu...etc...
		lastStepTime: 	2126941
		lastStepMessage: 	nil
		lastCycleTime: 	2126981
		alarms: 	a Heap()
		lastAlarmTime: 	2126941
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(336068608))(a PreDebu...etc...
		lastStepTime: 	2126941
		lastStepMessage: 	nil
		lastCycleTime: 	2126981
		alarms: 	a Heap()
		lastAlarmTime: 	2126941
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(336068608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:51:33 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	2097954
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

SmallInteger>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		aChar: 	$s
		nextSelection: 	0
		milliSeconds: 	2097954
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		event: 	[keystroke 's']
		aChar: 	$s
		aSpecialKey: 	115
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 's']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		timeStamp: 	55558650
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	300@307
		handler: 	nil
		wasHandled: 	true
		keyValue: 	115
		charCode: 	115
		scanCode: 	83


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
		localEvt: 	[keystroke 's']
		index: 	2
		child: 	a TransformMorph(888143872)
		morphs: 	an Array(a TransformMorph(888143872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(604241920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588181 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588181 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(236716032) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(236716032) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(604241920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588181 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588181 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(604241920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588181 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588181 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(604241920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588181 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588181 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(604241920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588181 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588181 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
		evtBuf: 	#(2 55558650 115 0 0 115 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(604241920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588181 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588181 168 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(236716032))(a PreDebu...etc...
		lastStepTime: 	2127463
		lastStepMessage: 	nil
		lastCycleTime: 	2127506
		alarms: 	a Heap()
		lastAlarmTime: 	2127463
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(236716032))(a PreDebu...etc...
		lastStepTime: 	2127463
		lastStepMessage: 	nil
		lastCycleTime: 	2127506
		alarms: 	a Heap()
		lastAlarmTime: 	2127463
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(236716032))(a PreDebu...etc...
		lastStepTime: 	2127463
		lastStepMessage: 	nil
		lastCycleTime: 	2127506
		alarms: 	a Heap()
		lastAlarmTime: 	2127463
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(236716032))(a PreDebu...etc...
		lastStepTime: 	2127463
		lastStepMessage: 	nil
		lastCycleTime: 	2127506
		alarms: 	a Heap()
		lastAlarmTime: 	2127463
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(236716032) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
27 August 2013 10:51:34 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: adaptToNumber: 2097954 andSend: #-
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#adaptToNumber:andSend:
		args: 	#(2097954 #-)
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 2097954 andSend: #-
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	2097954
		selector: 	#-
	Receiver's instance variables: 
nil

SmallInteger(Integer)>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

SmallInteger>>-
	Receiver: 2097954
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
2097954

PluggableListMorph>>basicKeyPressed:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		aChar: 	$s
		nextSelection: 	0
		milliSeconds: 	2097954
		slowKeyStroke: 	nil
		nextSelectionText: 	nil
		oldSelection: 	0
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>keyStroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		event: 	[keystroke 's']
		aChar: 	$s
		aSpecialKey: 	115
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>handleKeystroke:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 's']
	Arguments and temporary variables: 
		anObject: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		timeStamp: 	55558650
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	300@307
		handler: 	nil
		wasHandled: 	true
		keyValue: 	115
		charCode: 	115
		scanCode: 	83


PluggableListMorph(Morph)>>handleEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
		localEvt: 	[keystroke 's']
		index: 	2
		child: 	a TransformMorph(888143872)
		morphs: 	an Array(a TransformMorph(888143872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		aMorph: 	a PluggableListMorph(829947904)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


PluggableListMorph(Morph)>>processEvent:using:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph(Morph)>>processEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


PluggableListMorph>>handleFocusEvent:
	Receiver: a PluggableListMorph(829947904)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	72@189 corner: 417@655
		owner: 	a SystemWindow(609746944)
		submorphs: 	an Array(a TransformMorph(888143872))
		fullBounds: 	72@189 corner: 417@655
		color: 	Color white
		extension: 	a MorphExtension (233832448) [locked]  [other:  (selectionColor -> (...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)
		model: 	nil
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(859045888)
		scroller: 	a TransformMorph(888143872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(884736000)
		list: 	nil
		getListSelector: 	nil
		getListSizeSelector: 	nil
		getListElementSelector: 	nil
		getIndexSelector: 	nil
		setIndexSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		lastKeystrokeTime: 	nil
		lastKeystrokes: 	nil
		doubleClickSelector: 	nil
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	a LazyListMorph(731906048)
		hScrollRangeCache: 	nil
		dragItemSelector: 	nil
		dropItemSelector: 	nil
		wantsDropSelector: 	nil
		wrapSelector: 	nil
		searchedElement: 	nil
		multipleSelection: 	false
		dragOnOrOff: 	nil
		setSelectionListSelector: 	nil
		getSelectionListSelector: 	nil
		resetListSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(403439616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588572 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588572 168 205 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(35913728) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(35913728) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(403439616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588572 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588572 168 205 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		focusHolder: 	a PluggableListMorph(829947904)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(403439616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588572 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588572 168 205 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(403439616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588572 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588572 168 205 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(403439616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588572 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588572 168 205 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke 's']
		evtBuf: 	#(2 55558650 115 0 0 115 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	168@205 corner: 184@221
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	168@205 corner: 184@221
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(403439616)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[168@205 mouseUp 55588572 nil]
		targetOffset: 	33@16
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 55588572 168 205 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(35913728))(a PreDebug...etc...
		lastStepTime: 	2127857
		lastStepMessage: 	nil
		lastCycleTime: 	2127898
		alarms: 	a Heap()
		lastAlarmTime: 	2127857
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(35913728))(a PreDebug...etc...
		lastStepTime: 	2127857
		lastStepMessage: 	nil
		lastCycleTime: 	2127898
		alarms: 	a Heap()
		lastAlarmTime: 	2127857
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(35913728))(a PreDebug...etc...
		lastStepTime: 	2127857
		lastStepMessage: 	nil
		lastCycleTime: 	2127898
		alarms: 	a Heap()
		lastAlarmTime: 	2127857
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1350@689
		canvas: 	a FormCanvas on: DisplayScreen(1350x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(35913728))(a PreDebug...etc...
		lastStepTime: 	2127857
		lastStepMessage: 	nil
		lastCycleTime: 	2127898
		alarms: 	a Heap()
		lastAlarmTime: 	2127857
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(35913728) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
UndefinedObject(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>-
SmallInteger>>-
PluggableListMorph>>basicKeyPressed:
PluggableListMorph>>keyStroke:
PluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
PluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableListMorph(Morph)>>processEvent:using:
PluggableListMorph(Morph)>>processEvent:
PluggableListMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
29 August 2013 9:13:02 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>ensureBoundsFrom:to:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		fromIndex: 	1
		toIndex: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


AmberRemoteDevelopingServer class>>firstClient
	Receiver: AmberRemoteDevelopingServer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#AmberRemoteDevelopingServer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil
		_mutex: 	a Mutex
		_clients: 	an OrderedCollection()
		_sockets: 	an OrderedCollection()
		workspace: 	a ToolAmberWorkspace


ToolAmberWorkspace class>>openOnFirstClient
	Receiver: ToolAmberWorkspace
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Workspace
		methodDict: 	a MethodDictionary(#addResult:->(ToolAmberWorkspace>>#addResult: "a...etc...
		format: 	152
		instanceVariables: 	#('client')
		organization: 	('as yet unclassified' addResult: doIt initialize printIt yellowB...etc...
		subclasses: 	nil
		name: 	#ToolAmberWorkspace
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil


AmberRemoteDevelopingServer class>>openWorkspace
	Receiver: AmberRemoteDevelopingServer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#AmberRemoteDevelopingServer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil
		_mutex: 	a Mutex
		_clients: 	an OrderedCollection()
		_sockets: 	an OrderedCollection()
		workspace: 	a ToolAmberWorkspace


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ AmberRemoteDevelopingServer openWorkspace
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(558628864)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace'
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>doIt:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
		aBoolean: 	false
		return: 	[:val | ^ val]
		asciiValue: 	101
		actions: 	#(#noop: #cursorHome: #noop: #noop: #cursorEnd: #noop: #noop: #noop: #...etc...
		action: 	#doIt:
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
		return: 	[:val | ^ val]
		asciiValue: 	100
		honorCommandKeys: 	true
		char: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>dispatchOn:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
		char: 	nil
		return: 	[:val | ^ val]
		keyEvents: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[self dispatchOn: aKeyboardEvent]
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		anAction: 	[self dispatchOn: aKeyboardEvent]
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor(TextEditor)>>keystroke:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a SmalltalkEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-end>']
		action: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
	Receiver: ECToolSet
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(671088640)
		evt: 	[keystroke '<Cmd-end>']
		completionAllowed: 	true
		editor: 	a SmalltalkEditor
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#ECToolSet
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#OcompletionPharoCompatibility
		traitComposition: 	{}
		localSelectors: 	nil


ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
	Receiver: a ToolRegistry
	Arguments and temporary variables: 
		aBlock: 	[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			ac...etc...
		aTextMorph: 	a TextMorphForEditView(671088640)
		evt: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		tools: 	an IdentityDictionary(#basicInspector->BasicInspector #browser->[self de...etc...
		inspectorsMap: 	an IdentityDictionary(#CompiledMethod->#CompiledMethodInspector ...etc...


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-end>']
		view: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-end>']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-end>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(671088640)
	Receiver's instance variables: 
		timeStamp: 	75802984
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	217@58
		handler: 	nil
		wasHandled: 	true
		keyValue: 	100
		charCode: 	4
		scanCode: 	68


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-end>']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@18
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@18
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 188038) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace '
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-end>']
		focusHolder: 	a TextMorphForEditView(671088640)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	266@506 corner: 282@522
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(12320768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[266@506 mouseUp 75791968 nil]
		targetOffset: 	221@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 75791968 266 506 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@705
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(776732672) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1366@705
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(776732672) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-end>']
		focusHolder: 	a TextMorphForEditView(671088640)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	266@506 corner: 282@522
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(12320768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[266@506 mouseUp 75791968 nil]
		targetOffset: 	221@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 75791968 266 506 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-end>']
		focusHolder: 	a TextMorphForEditView(671088640)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	266@506 corner: 282@522
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(12320768)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[266@506 mouseUp 75791968 nil]
		targetOffset: 	221@59
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 75791968 266 506 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>ensureBoundsFrom:to:
OrderedCollection>>at:
AmberRemoteDevelopingServer class>>firstClient
ToolAmberWorkspace class>>openOnFirstClient
AmberRemoteDevelopingServer class>>openWorkspace
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
SmalltalkEditor>>doIt
SmalltalkEditor>>doIt:
SmalltalkEditor(TextEditor)>>performCmdActionsWith:shifted:return:
SmalltalkEditor(TextEditor)>>dispatchCommandOn:return:
SmalltalkEditor(TextEditor)>>dispatchOn:
[self dispatchOn: aKeyboardEvent] in SmalltalkEditor(TextEditor)>>keystroke:
SmalltalkEditor(TextEditor)>>handleKeystrokeAction:
SmalltalkEditor(TextEditor)>>handleEditionAction:fromKeyboardEvent:
SmalltalkEditor(TextEditor)>>keystroke:
[editor keystroke: evt] in [| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
[| action |
evt keyValue = 13
		ifTrue: [action := self crAction.
			action
				ifNotNil: [evt hand newKeyboardFocus: nil.
					^ action value]].
	self
		handleInteraction: [editor keystroke: evt].
	self updateFromParagraph.
	super keyStroke: evt] in TextMorphForEditView(TextMorph)>>keyStroke:
ECToolSet class>>codeCompletionAround:textMorph:keyStroke:
ToolRegistry>>codeCompletionAround:textMorph:keyStroke:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed
10 September 2013 12:20:28 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

Socket(Object)>>primitiveFailed:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		selector: 	#primSocketSendDone:
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket(Object)>>primitiveFailed
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>primSocketSendDone:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		socketID: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>waitForSendDoneFor:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		timeout: 	45
		startTime: 	9400
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendSomeData:startIndex:count:for:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#2 + 2 ocket Protocol Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	18
		aTimeoutInSeconds: 	45
		bytesSent: 	nil
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendSomeData:startIndex:count:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#2 + 2 ocket Protocol Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	18
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendData:count:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		buffer: 	'inspectIt#2 + 2 ocket Protocol Handshake

Upgrade: WebSocket

Connec...etc...
		n: 	18
		sent: 	0
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	24
		socket: 	a Socket[invalidSocketHandle]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#2 + 2 ocket Protocol Handshake

Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	550
		outNextToWrite: 	19
		lastRead: 	549
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


BlockClosure>>on:do:
	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SocketStream>>flush
		startpc: 	60
		numArgs: 	0


SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	24
		socket: 	a Socket[invalidSocketHandle]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#2 + 2 ocket Protocol Handshake

Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	550
		outNextToWrite: 	19
		lastRead: 	549
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


WebSocket07>>send:code:final:mask:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'inspectIt#2 + 2 '
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	16
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#2 + 2 '
		i: 	nil
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:final:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'inspectIt#2 + 2 '
		opcode: 	1
		isFinal: 	true
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'inspectIt#2 + 2 '
		opcode: 	1
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		aStringOrBytes: 	'inspectIt#2 + 2 '
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


ToolAmberWorkspace>>inspectIt
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(884211712) a PluggableTextMorph(16...etc...
		contents: 	a Text for '2 + 2 '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#cr
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(164102144)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(884211712) a PluggableTextMorph(16...etc...
		contents: 	a Text for '2 + 2 '
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#cr
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[219@522 mouseUp 135881015 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	160@520 corner: 270@534
		owner: 	a MenuMorph(160694272)
		submorphs: 	#()
		fullBounds: 	160@520 corner: 270@534
		color: 	Color black
		extension: 	a MorphExtension (249823232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(164102144))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[219@522 mouseUp 135881015 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	160@520 corner: 270@534
		owner: 	a MenuMorph(160694272)
		submorphs: 	#()
		fullBounds: 	160@520 corner: 270@534
		color: 	Color black
		extension: 	a MorphExtension (249823232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(164102144))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[219@522 mouseUp 135881015 nil]
	Receiver's instance variables: 
		bounds: 	160@520 corner: 270@534
		owner: 	a MenuMorph(160694272)
		submorphs: 	#()
		fullBounds: 	160@520 corner: 270@534
		color: 	Color black
		extension: 	a MorphExtension (249823232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(164102144))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
	Receiver's instance variables: 
		bounds: 	160@520 corner: 270@534
		owner: 	a MenuMorph(160694272)
		submorphs: 	#()
		fullBounds: 	160@520 corner: 270@534
		color: 	Color black
		extension: 	a MorphExtension (249823232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(164102144))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [219@522 mouseUp 135881015 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Receiver's instance variables: 
		timeStamp: 	135881015
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	219@522
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
	Receiver's instance variables: 
		bounds: 	160@520 corner: 270@534
		owner: 	a MenuMorph(160694272)
		submorphs: 	#()
		fullBounds: 	160@520 corner: 270@534
		color: 	Color black
		extension: 	a MorphExtension (249823232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(164102144))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		aMorph: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		aMorph: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(239599616)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	160@520 corner: 270@534
		owner: 	a MenuMorph(160694272)
		submorphs: 	#()
		fullBounds: 	160@520 corner: 270@534
		color: 	Color black
		extension: 	a MorphExtension (249823232)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(164102144))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		aMorph: 	a MenuMorph(160694272)
		localEvt: 	[219@522 mouseUp 135881015 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(76808192)'Do it on...' a ToggleMenuItemM...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		aMorph: 	a MenuMorph(160694272)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(160694272)
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	155@477 corner: 275@655
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(76808192)'Do it on...' a ToggleMenuIt...etc...
		fullBounds: 	155@477 corner: 275@655
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (175636480) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(76808192)'Do it on...' a ...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(160694272)
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
	Receiver's instance variables: 
		bounds: 	155@477 corner: 275@655
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(76808192)'Do it on...' a ToggleMenuIt...etc...
		fullBounds: 	155@477 corner: 275@655
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (175636480) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(76808192)'Do it on...' a ...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(160694272)
	Arguments and temporary variables: 
		evt: 	[219@522 mouseUp 135881015 nil]
	Receiver's instance variables: 
		bounds: 	155@477 corner: 275@655
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(76808192)'Do it on...' a ToggleMenuIt...etc...
		fullBounds: 	155@477 corner: 275@655
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (175636480) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(239599616)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(76808192)'Do it on...' a ...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		focusHolder: 	a MenuMorph(160694272)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	219@522 corner: 235@538
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(766509056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[219@522 mouseUp 135881015 nil]
		targetOffset: 	59@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135881015 219 522 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(401604608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[219@522 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(401604608) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		focusHolder: 	a MenuMorph(160694272)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	219@522 corner: 235@538
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(766509056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[219@522 mouseUp 135881015 nil]
		targetOffset: 	59@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135881015 219 522 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
		focusHolder: 	a MenuMorph(160694272)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	219@522 corner: 235@538
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(766509056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[219@522 mouseUp 135881015 nil]
		targetOffset: 	59@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135881015 219 522 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[219@522 mouseUp 135881015 nil]
	Receiver's instance variables: 
		bounds: 	219@522 corner: 235@538
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(766509056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[219@522 mouseUp 135881015 nil]
		targetOffset: 	59@2
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135881015 219 522 0 0 1 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil



--- The full stack ---
Socket(Object)>>primitiveFailed:
Socket(Object)>>primitiveFailed
Socket>>primSocketSendDone:
Socket>>waitForSendDoneFor:
Socket>>sendSomeData:startIndex:count:for:
Socket>>sendSomeData:startIndex:count:
Socket>>sendData:count:
[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
BlockClosure>>on:do:
SocketStream>>flush
WebSocket07>>send:code:final:mask:
WebSocket07>>send:code:final:
WebSocket07>>send:code:
WebSocket07>>send:
ToolAmberWorkspace>>inspectIt
ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed
10 September 2013 12:21:59 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

Socket(Object)>>primitiveFailed:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		selector: 	#primSocketSendDone:
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket(Object)>>primitiveFailed
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>primSocketSendDone:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		socketID: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>waitForSendDoneFor:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		timeout: 	45
		startTime: 	100706
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendSomeData:startIndex:count:for:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#2 + 2 
inspectIt#2+2Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	33
		aTimeoutInSeconds: 	45
		bytesSent: 	nil
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendSomeData:startIndex:count:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#2 + 2 
inspectIt#2+2Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	33
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendData:count:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		buffer: 	'inspectIt#2 + 2 
inspectIt#2+2Handshake

Upgrade: WebSocket

Connec...etc...
		n: 	33
		sent: 	0
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	24
		socket: 	a Socket[invalidSocketHandle]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#2 + 2 
inspectIt#2+2Handshake

Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	550
		outNextToWrite: 	34
		lastRead: 	549
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


BlockClosure>>on:do:
	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SocketStream>>flush
		startpc: 	60
		numArgs: 	0


SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	24
		socket: 	a Socket[invalidSocketHandle]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#2 + 2 
inspectIt#2+2Handshake

Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	550
		outNextToWrite: 	34
		lastRead: 	549
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


WebSocket07>>send:code:final:mask:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'inspectIt#2+2'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	13
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#2+2'
		i: 	nil
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:final:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'inspectIt#2+2'
		opcode: 	1
		isFinal: 	true
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'inspectIt#2+2'
		opcode: 	1
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		aStringOrBytes: 	'inspectIt#2+2'
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


ToolAmberWorkspace>>inspectIt
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(809238528) a PluggableTextMorph(88...etc...
		contents: 	a Text for '2+2'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(88080384)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(809238528) a PluggableTextMorph(88...etc...
		contents: 	a Text for '2+2'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[199@494 mouseUp 135972312 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	165@487 corner: 275@501
		owner: 	a MenuMorph(248512512)
		submorphs: 	#()
		fullBounds: 	165@487 corner: 275@501
		color: 	Color black
		extension: 	a MorphExtension (337641472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(88080384))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[199@494 mouseUp 135972312 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	165@487 corner: 275@501
		owner: 	a MenuMorph(248512512)
		submorphs: 	#()
		fullBounds: 	165@487 corner: 275@501
		color: 	Color black
		extension: 	a MorphExtension (337641472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(88080384))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[199@494 mouseUp 135972312 nil]
	Receiver's instance variables: 
		bounds: 	165@487 corner: 275@501
		owner: 	a MenuMorph(248512512)
		submorphs: 	#()
		fullBounds: 	165@487 corner: 275@501
		color: 	Color black
		extension: 	a MorphExtension (337641472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(88080384))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
	Receiver's instance variables: 
		bounds: 	165@487 corner: 275@501
		owner: 	a MenuMorph(248512512)
		submorphs: 	#()
		fullBounds: 	165@487 corner: 275@501
		color: 	Color black
		extension: 	a MorphExtension (337641472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(88080384))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [199@494 mouseUp 135972312 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Receiver's instance variables: 
		timeStamp: 	135972312
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	199@494
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
	Receiver's instance variables: 
		bounds: 	165@487 corner: 275@501
		owner: 	a MenuMorph(248512512)
		submorphs: 	#()
		fullBounds: 	165@487 corner: 275@501
		color: 	Color black
		extension: 	a MorphExtension (337641472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(88080384))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		aMorph: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		aMorph: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(327417856)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	165@487 corner: 275@501
		owner: 	a MenuMorph(248512512)
		submorphs: 	#()
		fullBounds: 	165@487 corner: 275@501
		color: 	Color black
		extension: 	a MorphExtension (337641472)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(88080384))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		aMorph: 	a MenuMorph(248512512)
		localEvt: 	[199@494 mouseUp 135972312 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(164626432)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		aMorph: 	a MenuMorph(248512512)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(248512512)
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	160@444 corner: 280@622
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(164626432)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	160@444 corner: 280@622
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (263454720) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(164626432)'Do it on...' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(248512512)
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
	Receiver's instance variables: 
		bounds: 	160@444 corner: 280@622
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(164626432)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	160@444 corner: 280@622
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (263454720) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(164626432)'Do it on...' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(248512512)
	Arguments and temporary variables: 
		evt: 	[199@494 mouseUp 135972312 nil]
	Receiver's instance variables: 
		bounds: 	160@444 corner: 280@622
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(164626432)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	160@444 corner: 280@622
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (263454720) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(327417856)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(164626432)'Do it on...' a...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		focusHolder: 	a MenuMorph(248512512)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	199@494 corner: 215@510
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(411041792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[199@494 mouseUp 135972312 nil]
		targetOffset: 	34@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135972312 199 494 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(45875200) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[199@494 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(45875200) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		focusHolder: 	a MenuMorph(248512512)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	199@494 corner: 215@510
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(411041792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[199@494 mouseUp 135972312 nil]
		targetOffset: 	34@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135972312 199 494 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
		focusHolder: 	a MenuMorph(248512512)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	199@494 corner: 215@510
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(411041792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[199@494 mouseUp 135972312 nil]
		targetOffset: 	34@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135972312 199 494 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[199@494 mouseUp 135972312 nil]
	Receiver's instance variables: 
		bounds: 	199@494 corner: 215@510
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(411041792)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[199@494 mouseUp 135972312 nil]
		targetOffset: 	34@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135972312 199 494 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil



--- The full stack ---
Socket(Object)>>primitiveFailed:
Socket(Object)>>primitiveFailed
Socket>>primSocketSendDone:
Socket>>waitForSendDoneFor:
Socket>>sendSomeData:startIndex:count:for:
Socket>>sendSomeData:startIndex:count:
Socket>>sendData:count:
[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
BlockClosure>>on:do:
SocketStream>>flush
WebSocket07>>send:code:final:mask:
WebSocket07>>send:code:final:
WebSocket07>>send:code:
WebSocket07>>send:
ToolAmberWorkspace>>inspectIt
ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed
10 September 2013 12:22:14 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

Socket(Object)>>primitiveFailed:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		selector: 	#primSocketSendDone:
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket(Object)>>primitiveFailed
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>primSocketSendDone:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		socketID: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>waitForSendDoneFor:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		timeout: 	45
		startTime: 	115279
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendSomeData:startIndex:count:for:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#2 + 2 
inspectIt#2+2	doIt# 2+2Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	44
		aTimeoutInSeconds: 	45
		bytesSent: 	nil
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendSomeData:startIndex:count:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#2 + 2 
inspectIt#2+2	doIt# 2+2Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	44
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


Socket>>sendData:count:
	Receiver: a Socket[invalidSocketHandle]
	Arguments and temporary variables: 
		buffer: 	'inspectIt#2 + 2 
inspectIt#2+2	doIt# 2+2Upgrade: WebSocket

Connec...etc...
		n: 	44
		sent: 	0
	Receiver's instance variables: 
		semaphore: 	a Semaphore()
		socketHandle: 	#[27 204 45 82 0 0 0 0 64 16 104 0]
		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...
		writeSemaphore: 	a Semaphore()


[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	24
		socket: 	a Socket[invalidSocketHandle]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#2 + 2 
inspectIt#2+2	doIt# 2+2Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	550
		outNextToWrite: 	45
		lastRead: 	549
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


BlockClosure>>on:do:
	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SocketStream>>flush
		startpc: 	60
		numArgs: 	0


SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	24
		socket: 	a Socket[invalidSocketHandle]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#2 + 2 
inspectIt#2+2	doIt# 2+2Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	550
		outNextToWrite: 	45
		lastRead: 	549
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


WebSocket07>>send:code:final:mask:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'doIt# 2+2'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	9
		mask: 	nil
		xLength: 	#[]
		copy: 	'doIt# 2+2'
		i: 	nil
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:final:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'doIt# 2+2'
		opcode: 	1
		isFinal: 	true
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		data: 	'doIt# 2+2'
		opcode: 	1
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:
	Receiver: WebSocket07(127.0.0.1:49626)
	Arguments and temporary variables: 
		aStringOrBytes: 	'doIt# 2+2'
	Receiver's instance variables: 
		name: 	'127.0.0.1:49626'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


ToolAmberWorkspace>>doIt
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(809238528) a PluggableTextMorph(88...etc...
		contents: 	a Text for '2+2'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(88080384)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(809238528) a PluggableTextMorph(88...etc...
		contents: 	a Text for '2+2'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(759169024)'Do it on...'
	Arguments and temporary variables: 
		evt: 	[372@447 mouseUp 135986890 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	317@437 corner: 427@455
		owner: 	a MenuMorph(843055104)
		submorphs: 	#()
		fullBounds: 	317@437 corner: 427@455
		color: 	Color black
		extension: 	a MorphExtension (769392640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(88080384))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(759169024)'Do it on...'
	Arguments and temporary variables: 
		evt: 	[372@447 mouseUp 135986890 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	317@437 corner: 427@455
		owner: 	a MenuMorph(843055104)
		submorphs: 	#()
		fullBounds: 	317@437 corner: 427@455
		color: 	Color black
		extension: 	a MorphExtension (769392640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(88080384))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(759169024)'Do it on...'
	Arguments and temporary variables: 
		evt: 	[372@447 mouseUp 135986890 nil]
	Receiver's instance variables: 
		bounds: 	317@437 corner: 427@455
		owner: 	a MenuMorph(843055104)
		submorphs: 	#()
		fullBounds: 	317@437 corner: 427@455
		color: 	Color black
		extension: 	a MorphExtension (769392640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(88080384))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(759169024)'Do it on...'
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
	Receiver's instance variables: 
		bounds: 	317@437 corner: 427@455
		owner: 	a MenuMorph(843055104)
		submorphs: 	#()
		fullBounds: 	317@437 corner: 427@455
		color: 	Color black
		extension: 	a MorphExtension (769392640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(88080384))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [372@447 mouseUp 135986890 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(759169024)'Do it on...'
	Receiver's instance variables: 
		timeStamp: 	135986890
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	372@447
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(759169024)'Do it on...'
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
	Receiver's instance variables: 
		bounds: 	317@437 corner: 427@455
		owner: 	a MenuMorph(843055104)
		submorphs: 	#()
		fullBounds: 	317@437 corner: 427@455
		color: 	Color black
		extension: 	a MorphExtension (769392640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(88080384))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		aMorph: 	a ToggleMenuItemMorph(759169024)'Do it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		aMorph: 	a ToggleMenuItemMorph(759169024)'Do it on...'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(759169024)'Do it on...'
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	317@437 corner: 427@455
		owner: 	a MenuMorph(843055104)
		submorphs: 	#()
		fullBounds: 	317@437 corner: 427@455
		color: 	Color black
		extension: 	a MorphExtension (769392640)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(88080384))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		aMorph: 	a MenuMorph(843055104)
		localEvt: 	[372@447 mouseUp 135986890 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(759169024)'Do it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(759169024)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		aMorph: 	a MenuMorph(843055104)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	312@432 corner: 432@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(759169024)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	312@432 corner: 432@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (857997312) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(759169024)'Do it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(759169024)'Do it on...' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
	Receiver's instance variables: 
		bounds: 	312@432 corner: 432@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(759169024)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	312@432 corner: 432@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (857997312) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(759169024)'Do it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(759169024)'Do it on...' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[372@447 mouseUp 135986890 nil]
	Receiver's instance variables: 
		bounds: 	312@432 corner: 432@610
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(759169024)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	312@432 corner: 432@610
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (857997312) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(759169024)'Do it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(759169024)'Do it on...' a...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		focusHolder: 	a MenuMorph(843055104)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	372@447 corner: 388@463
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	372@447 corner: 388@463
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(412614656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[372@447 mouseUp 135986890 nil]
		targetOffset: 	55@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135986890 372 447 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(47710208) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[372@447 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(47710208) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		focusHolder: 	a MenuMorph(843055104)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	372@447 corner: 388@463
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	372@447 corner: 388@463
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(412614656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[372@447 mouseUp 135986890 nil]
		targetOffset: 	55@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135986890 372 447 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
		focusHolder: 	a MenuMorph(843055104)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	372@447 corner: 388@463
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	372@447 corner: 388@463
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(412614656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[372@447 mouseUp 135986890 nil]
		targetOffset: 	55@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135986890 372 447 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[372@447 mouseUp 135986890 nil]
	Receiver's instance variables: 
		bounds: 	372@447 corner: 388@463
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	372@447 corner: 388@463
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(412614656)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[372@447 mouseUp 135986890 nil]
		targetOffset: 	55@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 135986890 372 447 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil



--- The full stack ---
Socket(Object)>>primitiveFailed:
Socket(Object)>>primitiveFailed
Socket>>primSocketSendDone:
Socket>>waitForSendDoneFor:
Socket>>sendSomeData:startIndex:count:for:
Socket>>sendSomeData:startIndex:count:
Socket>>sendData:count:
[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
BlockClosure>>on:do:
SocketStream>>flush
WebSocket07>>send:code:final:mask:
WebSocket07>>send:code:final:
WebSocket07>>send:code:
WebSocket07>>send:
ToolAmberWorkspace>>doIt
ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: AmberRemoteDevelopingServer class>>startServerOnPort:
10 September 2013 12:23:34 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

AmberRemoteDevelopingServer class(Object)>>doesNotUnderstand: #startServerOnPort:
	Receiver: AmberRemoteDevelopingServer
	Arguments and temporary variables: 
		aMessage: 	startServerOnPort: 9090
		exception: 	MessageNotUnderstood: AmberRemoteDevelopingServer class>>startServer...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary()
		format: 	2
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#AmberRemoteDevelopingServer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'WebToolsAmber-GSoC2013'
		traitComposition: 	nil
		localSelectors: 	nil
		_mutex: 	a Mutex
		_clients: 	an OrderedCollection(an ObjectAmberClient an ObjectAmberClient)
		_sockets: 	an OrderedCollection(WebSocket07(127.0.0.1:49626) WebSocket07(127.0.0...etc...
		workspace: 	a ToolAmberWorkspace


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace.
Amb...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ AmberRemoteDevelopingServer startServerOnPort: 9090
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(756023296)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace.
Amb...etc...
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	45@447 corner: 485@614
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	45@447 corner: 485@614
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	45@447 corner: 485@614
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	45@447 corner: 485@614
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@34
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@34
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 195191) (myDepe...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace.
AmberRemoteDevelop...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	45@447 corner: 485@614
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	45@447 corner: 485@614
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	45@447 corner: 485@614
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	45@447 corner: 485@614
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(44 to: 94)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'AmberRemoteDevelopingServer openWorkspace.
AmberRemoteDev...etc...
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(348389376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[97@342 mouseUp 136067281 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	55@329 corner: 192@347
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	55@329 corner: 192@347
		color: 	Color black
		extension: 	a MorphExtension (358612992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(348389376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[97@342 mouseUp 136067281 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	55@329 corner: 192@347
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	55@329 corner: 192@347
		color: 	Color black
		extension: 	a MorphExtension (358612992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(348389376)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[97@342 mouseUp 136067281 nil]
	Receiver's instance variables: 
		bounds: 	55@329 corner: 192@347
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	55@329 corner: 192@347
		color: 	Color black
		extension: 	a MorphExtension (358612992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(348389376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
	Receiver's instance variables: 
		bounds: 	55@329 corner: 192@347
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	55@329 corner: 192@347
		color: 	Color black
		extension: 	a MorphExtension (358612992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [97@342 mouseUp 136067281 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	136067281
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	97@342
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(348389376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
	Receiver's instance variables: 
		bounds: 	55@329 corner: 192@347
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	55@329 corner: 192@347
		color: 	Color black
		extension: 	a MorphExtension (358612992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		aMorph: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		aMorph: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(348389376)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	55@329 corner: 192@347
		owner: 	a MenuMorph(341311488)
		submorphs: 	#()
		fullBounds: 	55@329 corner: 192@347
		color: 	Color black
		extension: 	a MorphExtension (358612992)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		aMorph: 	a MenuMorph(341311488)
		localEvt: 	[97@342 mouseUp 136067281 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		aMorph: 	a MenuMorph(341311488)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(341311488)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	50@324 corner: 197@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	50@324 corner: 197@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(348389376)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(341311488)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
	Receiver's instance variables: 
		bounds: 	50@324 corner: 197@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	50@324 corner: 197@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(348389376)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(341311488)
	Arguments and temporary variables: 
		evt: 	[97@342 mouseUp 136067281 nil]
	Receiver's instance variables: 
		bounds: 	50@324 corner: 197@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(348389376)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	50@324 corner: 197@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (356253696) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(348389376)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(348389376)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		focusHolder: 	a MenuMorph(341311488)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	97@342 corner: 113@358
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(195821568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[97@342 mouseUp 136067281 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 136067281 97 342 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(901513216) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[97@342 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(901513216) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		focusHolder: 	a MenuMorph(341311488)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	97@342 corner: 113@358
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(195821568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[97@342 mouseUp 136067281 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 136067281 97 342 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		focusHolder: 	a MenuMorph(341311488)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	97@342 corner: 113@358
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(195821568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[97@342 mouseUp 136067281 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 136067281 97 342 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
	Receiver's instance variables: 
		bounds: 	97@342 corner: 113@358
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(195821568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[97@342 mouseUp 136067281 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 136067281 97 342 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[97@342 mouseUp 136067281 nil]
		evt: 	[97@342 mouseUp 136067281 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	97@342 corner: 113@358
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(195821568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[97@342 mouseUp 136067281 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 136067281 97 342 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[97@342 mouseUp 136067281 nil]
		evtBuf: 	#(1 136067281 97 342 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	97@342 corner: 113@358
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(195821568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[97@342 mouseUp 136067281 nil]
		targetOffset: 	42@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 136067281 97 342 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(901513216))(a PreDebu...etc...
		lastStepTime: 	195647
		lastStepMessage: 	nil
		lastCycleTime: 	195691
		alarms: 	a Heap()
		lastAlarmTime: 	195647
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
AmberRemoteDevelopingServer class(Object)>>doesNotUnderstand: #startServerOnPort:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ObjectAmberClient>>send:
10 September 2013 1:50:12 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

ObjectAmberClient(Object)>>doesNotUnderstand: #send:
	Receiver: an ObjectAmberClient
	Arguments and temporary variables: 
		aMessage: 	send: 'object#418'
		exception: 	MessageNotUnderstood: ObjectAmberClient>>send:
		resumeValue: 	nil
	Receiver's instance variables: 
		_socket: 	WebSocket07(127.0.0.1:57077)
		_connectionName: 	'defaultConnection'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace.
Amb...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphForEditView(671088640)
		failBlock: 	[self morph flash.
	^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	^ AmberRemoteDevelopingServer firstClient send: 'object#418'
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(934805504)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadWriteStream 'AmberRemoteDevelopingServer openWorkspace.
Amb...etc...
		requestor: 	a TextMorphForEditView(671088640)
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: ...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SmalltalkEditor>>evaluateSelectionAndDo:
		startpc: 	106
		numArgs: 	0


SmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[:result | result]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


SmalltalkEditor>>evaluateSelection
	Receiver: a SmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForEditView(671088640)
		selectionShowing: 	true
		model: 	a Workspace
		editingState: 	a SmalltalkEditingState


[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	259@465 corner: 699@632
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	259@465 corner: 699@632
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(93 to: 150)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


[result := editBlock value] in PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	259@465 corner: 699@632
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	259@465 corner: 699@632
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(93 to: 150)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


TextMorphForEditView(TextMorph)>>handleEdit:
	Receiver: a TextMorphForEditView(671088640)
	Arguments and temporary variables: 
		editBlock: 	[result := editBlock value]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@66
		owner: 	a TransformMorph(766246912)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@66
		color: 	Color black
		extension: 	a MorphExtension (751304704) [other:  (blinkStart -> 5392472) (myDep...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for 'AmberRemoteDevelopingServer openWorkspace.
AmberRemoteDevelop...etc...
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a SmalltalkEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	a PluggableTextMorph(710934528)
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


PluggableTextMorph>>handleEdit:
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 
		editBlock: 	[textMorph editor evaluateSelection]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	259@465 corner: 699@632
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	259@465 corner: 699@632
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(93 to: 150)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


PluggableTextMorph>>doIt
	Receiver: a PluggableTextMorph(710934528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	259@465 corner: 699@632
		owner: 	a SystemWindow(330301440)
		submorphs: 	an Array(a TransformMorph(766246912))
		fullBounds: 	259@465 corner: 699@632
		color: 	Color white
		extension: 	a MorphExtension (649854976) [locked] 
		borderWidth: 	1
		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)
		model: 	a Workspace
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(738459648)
		scroller: 	a TransformMorph(766246912)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#codePaneMenu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(762839040)
		textMorph: 	a TextMorphForEditView(671088640)
		getTextSelector: 	#contents
		setTextSelector: 	#acceptContents:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(93 to: 150)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a SHTextStylerST80
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil


Workspace(StringHolder)>>perform:orSendTo:
	Receiver: a Workspace
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a PluggableTextMorph(710934528)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(330301440) a PluggableTextMorph(71...etc...
		contents: 	a Text for 'AmberRemoteDevelopingServer openWorkspace.
AmberRemoteDev...etc...
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(694157312)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[358@340 mouseUp 141264937 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	312@329 corner: 449@347
		owner: 	a MenuMorph(687079424)
		submorphs: 	#()
		fullBounds: 	312@329 corner: 449@347
		color: 	Color black
		extension: 	a MorphExtension (704380928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(694157312)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[358@340 mouseUp 141264937 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	312@329 corner: 449@347
		owner: 	a MenuMorph(687079424)
		submorphs: 	#()
		fullBounds: 	312@329 corner: 449@347
		color: 	Color black
		extension: 	a MorphExtension (704380928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(694157312)'Do it (d)'
	Arguments and temporary variables: 
		evt: 	[358@340 mouseUp 141264937 nil]
	Receiver's instance variables: 
		bounds: 	312@329 corner: 449@347
		owner: 	a MenuMorph(687079424)
		submorphs: 	#()
		fullBounds: 	312@329 corner: 449@347
		color: 	Color black
		extension: 	a MorphExtension (704380928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(694157312)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
	Receiver's instance variables: 
		bounds: 	312@329 corner: 449@347
		owner: 	a MenuMorph(687079424)
		submorphs: 	#()
		fullBounds: 	312@329 corner: 449@347
		color: 	Color black
		extension: 	a MorphExtension (704380928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [358@340 mouseUp 141264937 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
	Receiver's instance variables: 
		timeStamp: 	141264937
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	358@340
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(694157312)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
	Receiver's instance variables: 
		bounds: 	312@329 corner: 449@347
		owner: 	a MenuMorph(687079424)
		submorphs: 	#()
		fullBounds: 	312@329 corner: 449@347
		color: 	Color black
		extension: 	a MorphExtension (704380928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		aMorph: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		aMorph: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(694157312)'Do it (d)'
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	312@329 corner: 449@347
		owner: 	a MenuMorph(687079424)
		submorphs: 	#()
		fullBounds: 	312@329 corner: 449@347
		color: 	Color black
		extension: 	a MorphExtension (704380928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Do it (d)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a Workspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a PluggableTextMorph(710934528))
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		aMorph: 	a MenuMorph(687079424)
		localEvt: 	[358@340 mouseUp 141264937 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
		morphs: 	an Array(a ToggleMenuItemMorph(694157312)'Do it (d)' a ToggleMenuItemMo...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		aMorph: 	a MenuMorph(687079424)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(687079424)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	307@324 corner: 454@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(694157312)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	307@324 corner: 454@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (702021632) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(694157312)'Do it (d)' a T...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(687079424)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
	Receiver's instance variables: 
		bounds: 	307@324 corner: 454@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(694157312)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	307@324 corner: 454@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (702021632) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(694157312)'Do it (d)' a T...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(687079424)
	Arguments and temporary variables: 
		evt: 	[358@340 mouseUp 141264937 nil]
	Receiver's instance variables: 
		bounds: 	307@324 corner: 454@671
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(694157312)'Do it (d)' a ToggleMenuIte...etc...
		fullBounds: 	307@324 corner: 454@671
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (702021632) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a Workspace
		selectedItem: 	a ToggleMenuItemMorph(694157312)'Do it (d)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(694157312)'Do it (d)' a T...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		focusHolder: 	a MenuMorph(687079424)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	358@340 corner: 374@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(244580352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[358@340 358@340 mouseMove 141264671 nil]
		targetOffset: 	46@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 141264671 358 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1005322240) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[358@340 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1005322240) a Sy...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		focusHolder: 	a MenuMorph(687079424)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	358@340 corner: 374@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(244580352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[358@340 358@340 mouseMove 141264671 nil]
		targetOffset: 	46@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 141264671 358 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		focusHolder: 	a MenuMorph(687079424)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	358@340 corner: 374@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(244580352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[358@340 358@340 mouseMove 141264671 nil]
		targetOffset: 	46@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 141264671 358 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
	Receiver's instance variables: 
		bounds: 	358@340 corner: 374@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(244580352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[358@340 358@340 mouseMove 141264671 nil]
		targetOffset: 	46@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 141264671 358 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[358@340 mouseUp 141264937 nil]
		evt: 	[358@340 mouseUp 141264937 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	358@340 corner: 374@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(244580352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[358@340 358@340 mouseMove 141264671 nil]
		targetOffset: 	46@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 141264671 358 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[358@340 mouseUp 141264937 nil]
		evtBuf: 	#(1 141264937 358 340 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	358@340 corner: 374@356
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(244580352)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[358@340 358@340 mouseMove 141264671 nil]
		targetOffset: 	46@11
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 141264671 358 340 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1005322240))(a PreDeb...etc...
		lastStepTime: 	5393300
		lastStepMessage: 	nil
		lastCycleTime: 	5393343
		alarms: 	a Heap()
		lastAlarmTime: 	5393300
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ObjectAmberClient(Object)>>doesNotUnderstand: #send:
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[rcvr class evaluatorClass new
		evaluate: self selectionForDoitAsStream
		in: ctxt
		to: rcvr
		notifying: self morph
		ifFail: [self morph flash.
			^ nil]
		logged: true] in SmalltalkEditor>>evaluateSelectionAndDo:
BlockClosure>>on:do:
SmalltalkEditor>>evaluateSelectionAndDo:
SmalltalkEditor>>evaluateSelection
[textMorph editor evaluateSelection] in PluggableTextMorph>>doIt
[result := editBlock value] in PluggableTextMorph>>handleEdit:
TextMorphForEditView(TextMorph)>>handleEdit:
PluggableTextMorph>>handleEdit:
PluggableTextMorph>>doIt
Workspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
TextMorphForEditView>>mouseDown:
TextMorphForEditView(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TextMorphForEditView(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
TransformMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
10 September 2013 3:04:47 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

MethodContext(ContextPart)>>doPrimitive:method:receiver:args:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		primitiveIndex: 	88
		meth: 	(Process>>#suspend "a CompiledMethod(464257024)")
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...
		arguments: 	#()
		value: 	nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(ContextPart)>>tryPrimitiveFor:receiver:args:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		method: 	(Process>>#suspend "a CompiledMethod(464257024)")
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...
		arguments: 	#()
		primIndex: 	88
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(ContextPart)>>send:to:with:super:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		selector: 	#suspend
		rcvr: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:args...etc...
		args: 	#()
		superFlag: 	false
		class: 	Process
		meth: 	(Process>>#suspend "a CompiledMethod(464257024)")
		val: 	nil
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(ContextPart)>>send:super:numArgs:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		selector: 	#suspend
		superFlag: 	false
		numArgs: 	0
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...
		arguments: 	#()
		answer: 	nil
		i: 	0
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(InstructionStream)>>interpretNextInstructionFor:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		client: 	Process>>terminate
		byte: 	208
		type: 	13
		offset: 	0
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(ContextPart)>>step
	Receiver: Process>>terminate
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(ContextPart)>>stepToCallee
	Receiver: Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	Process>>terminate
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


MethodContext(ContextPart)>>runUntilErrorOrReturnFrom:
	Receiver: Process>>terminate
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		sender: 	nil
		pc: 	166
		stackp: 	5
		method: 	(Process>>#terminate "a CompiledMethod(883425280)")
		closureOrNil: 	nil
		receiver: 	a Process in MethodContext(ContextPart)>>doPrimitive:method:receiver:...etc...


Process>>complete:
	Receiver: a Process in nil
	Arguments and temporary variables: 
		aContext: 	Process>>terminate
		ctxt: 	Process>>terminate
		pair: 	nil
		error: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		threadId: 	nil
		errorHandler: 	nil
		name: 	nil
		env: 	nil


Process>>completeStep:
	Receiver: a Process in nil
	Arguments and temporary variables: 
		aContext: 	ProcessorScheduler>>terminateActive
		callee: 	Process>>terminate
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	nil
		priority: 	40
		myList: 	nil
		threadId: 	nil
		errorHandler: 	nil
		name: 	nil
		env: 	nil


Debugger>>doStep
	Receiver: a Debugger
	Arguments and temporary variables: 
		currentContext: 	ProcessorScheduler>>terminateActive
		newContext: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(657195008) a PluggableListMorph(91...etc...
		contents: 	a Text for 'terminateActive
	"Terminate the process that is currently...etc...
		currentCompiledMethod: 	(ProcessorScheduler>>#terminateActive "a CompiledMethod(...etc...
		contentsSymbol: 	#source
		interruptedProcess: 	a Process in nil
		interruptedController: 	nil
		contextStack: 	an OrderedCollection(ProcessorScheduler>>terminateActive [self va...etc...
		contextStackTop: 	ProcessorScheduler>>terminateActive
		contextStackIndex: 	1
		contextStackList: 	#('ProcessorScheduler>>terminateActive' '[self value.
	Proces...etc...
		receiverInspector: 	an Inspector
		contextVariablesInspector: 	a ContextVariablesInspector
		externalInterrupt: 	false
		proceedValue: 	nil
		selectingPC: 	true
		savedCursor: 	nil
		errorWasInUIProcess: 	false
		labelString: 	nil


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(806092800)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	854@191 corner: 902@216
		owner: 	an OverflowRowMorph(601620480)
		submorphs: 	an Array(an AlignmentMorph(638320640))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (832569344) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Over'
		getStateSelector: 	nil
		actionSelector: 	#doStep
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(806092800)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(806092800)
		m: 	[878@198 mouseUp 145727500 nil]
	Receiver's instance variables: 
		bounds: 	854@191 corner: 902@216
		owner: 	an OverflowRowMorph(601620480)
		submorphs: 	an Array(an AlignmentMorph(638320640))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (832569344) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Over'
		getStateSelector: 	nil
		actionSelector: 	#doStep
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(163840000) a PluggableButtonMorph(378011648) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	4
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(163840000) a PluggableButtonMorph(378011648) a PluggableBu...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(806092800)
	Arguments and temporary variables: 
		evt: 	[878@198 mouseUp 145727500 nil]
		all: 	an Array(a PluggableButtonMorph(163840000) a PluggableButtonMorph(37801164...etc...
	Receiver's instance variables: 
		bounds: 	854@191 corner: 902@216
		owner: 	an OverflowRowMorph(601620480)
		submorphs: 	an Array(an AlignmentMorph(638320640))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (832569344) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Over'
		getStateSelector: 	nil
		actionSelector: 	#doStep
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(806092800)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
	Receiver's instance variables: 
		bounds: 	854@191 corner: 902@216
		owner: 	an OverflowRowMorph(601620480)
		submorphs: 	an Array(an AlignmentMorph(638320640))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (832569344) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Over'
		getStateSelector: 	nil
		actionSelector: 	#doStep
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [878@198 mouseUp 145727500 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(806092800)
	Receiver's instance variables: 
		timeStamp: 	145727500
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	878@198
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(806092800)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
	Receiver's instance variables: 
		bounds: 	854@191 corner: 902@216
		owner: 	an OverflowRowMorph(601620480)
		submorphs: 	an Array(an AlignmentMorph(638320640))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (832569344) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Over'
		getStateSelector: 	nil
		actionSelector: 	#doStep
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(806092800)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
	Receiver's instance variables: 
		bounds: 	854@191 corner: 902@216
		owner: 	an OverflowRowMorph(601620480)
		submorphs: 	an Array(an AlignmentMorph(638320640))
		fullBounds: 	nil
		color: 	(Color r: 0.8190000000000001 g: 0.8170000000000001 b: 0.8170000000000001...etc...
		extension: 	a MorphExtension (832569344) [balloonText]  [other:  (lastState -> f...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a Debugger
		label: 	'Over'
		getStateSelector: 	nil
		actionSelector: 	#doStep
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	true
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
		focusHolder: 	a PluggableButtonMorph(806092800)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	878@198 corner: 894@214
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	878@198 corner: 894@214
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(302514176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[878@198 mouseUp 145727500 nil]
		targetOffset: 	24@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 145727500 878 198 0 0 1 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(57409536) a System...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[878@198 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(57409536) a System...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
		focusHolder: 	a PluggableButtonMorph(806092800)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	878@198 corner: 894@214
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	878@198 corner: 894@214
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(302514176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[878@198 mouseUp 145727500 nil]
		targetOffset: 	24@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 145727500 878 198 0 0 1 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
		focusHolder: 	a PluggableButtonMorph(806092800)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	878@198 corner: 894@214
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	878@198 corner: 894@214
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(302514176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[878@198 mouseUp 145727500 nil]
		targetOffset: 	24@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 145727500 878 198 0 0 1 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
	Receiver's instance variables: 
		bounds: 	878@198 corner: 894@214
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	878@198 corner: 894@214
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(302514176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[878@198 mouseUp 145727500 nil]
		targetOffset: 	24@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 145727500 878 198 0 0 1 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[878@198 mouseUp 145727500 nil]
		evt: 	[878@198 mouseUp 145727500 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	878@198 corner: 894@214
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	878@198 corner: 894@214
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(302514176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[878@198 mouseUp 145727500 nil]
		targetOffset: 	24@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 145727500 878 198 0 0 1 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[878@198 mouseUp 145727500 nil]
		evtBuf: 	#(1 145727500 878 198 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	878@198 corner: 894@214
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	878@198 corner: 894@214
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableListMorph(302514176)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[878@198 mouseUp 145727500 nil]
		targetOffset: 	24@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 145727500 878 198 0 0 1 1)
		lastKeyScanCode: 	50
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(57409536))(a SystemWind...etc...
		lastStepTime: 	9868183
		lastStepMessage: 	nil
		lastCycleTime: 	9868111
		alarms: 	a Heap()
		lastAlarmTime: 	9855883
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(57409536))(a SystemWind...etc...
		lastStepTime: 	9868183
		lastStepMessage: 	nil
		lastCycleTime: 	9868111
		alarms: 	a Heap()
		lastAlarmTime: 	9855883
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(57409536))(a SystemWind...etc...
		lastStepTime: 	9868183
		lastStepMessage: 	nil
		lastCycleTime: 	9868111
		alarms: 	a Heap()
		lastAlarmTime: 	9855883
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SystemWindow(57409536))(a SystemWind...etc...
		lastStepTime: 	9868183
		lastStepMessage: 	nil
		lastCycleTime: 	9868111
		alarms: 	a Heap()
		lastAlarmTime: 	9855883
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(57409536) a System...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
MethodContext(ContextPart)>>doPrimitive:method:receiver:args:
MethodContext(ContextPart)>>tryPrimitiveFor:receiver:args:
MethodContext(ContextPart)>>send:to:with:super:
MethodContext(ContextPart)>>send:super:numArgs:
MethodContext(InstructionStream)>>interpretNextInstructionFor:
MethodContext(ContextPart)>>step
MethodContext(ContextPart)>>stepToCallee
MethodContext(ContextPart)>>runUntilErrorOrReturnFrom:
Process>>complete:
Process>>completeStep:
Debugger>>doStep
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
User Interrupt
10 September 2013 3:04:47 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

[delaySemaphore wait] in Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	20
		resumptionTime: 	9868591
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


BlockClosure>>ifCurtailed:
	Receiver: [delaySemaphore wait]
	Arguments and temporary variables: 
		aBlock: 	[self unschedule]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	Delay>>wait
		startpc: 	36
		numArgs: 	0


Delay>>wait
	Receiver: a Delay(20 msecs)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		delayDuration: 	20
		resumptionTime: 	9868591
		delaySemaphore: 	a Semaphore()
		beingWaitedOn: 	false


WorldState>>interCyclePause:
	Receiver: a WorldState
	Arguments and temporary variables: 
		milliSecs: 	20
		currentTime: 	9868571
		wait: 	20
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(950534144))(an Ove...etc...
		lastStepTime: 	9868571
		lastStepMessage: 	nil
		lastCycleTime: 	9868592
		alarms: 	a Heap()
		lastAlarmTime: 	9868571
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1280@689
		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OverflowRowMorph(950534144))(an Ove...etc...
		lastStepTime: 	9868571
		lastStepMessage: 	nil
		lastCycleTime: 	9868592
		alarms: 	a Heap()
		lastAlarmTime: 	9868571
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 1280@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a SystemWindow(177471488) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...
		format: 	132
		instanceVariables: 	nil
		organization: 	('*sound' beep)

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
[delaySemaphore wait] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
WorldState>>interCyclePause:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #primSocketSendDone: in a Socket[destroyed] failed
11 September 2013 5:24:23 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]
Image: Pharo1.3 [Latest update: #13315]

Socket(Object)>>primitiveFailed:
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 
		selector: 	#primSocketSendDone:
	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


Socket(Object)>>primitiveFailed
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


Socket>>primSocketSendDone:
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 
		socketID: 	nil
	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


Socket>>waitForSendDoneFor:
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 
		timeout: 	45
		startTime: 	9033902
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil
	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


Socket>>sendSomeData:startIndex:count:for:
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#Compiler newObjects sessionion

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24
		aTimeoutInSeconds: 	45
		bytesSent: 	nil
	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


Socket>>sendSomeData:startIndex:count:
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 
		aStringOrByteArray: 	'inspectIt#Compiler newObjects sessionion

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24
	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


Socket>>sendData:count:
	Receiver: a Socket[destroyed]
	Arguments and temporary variables: 
		buffer: 	'inspectIt#Compiler newObjects sessionion

Upgrade: WebSocket

Connec...etc...
		n: 	24
		sent: 	0
	Receiver's instance variables: 
		semaphore: 	nil
		socketHandle: 	nil
		readSemaphore: 	nil
		writeSemaphore: 	nil


[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	0
		socket: 	a Socket[destroyed]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#Compiler newObjects sessionion

Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	2445
		outNextToWrite: 	25
		lastRead: 	2444
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


BlockClosure>>on:do:
	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]
	Arguments and temporary variables: 
		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	SocketStream>>flush
		startpc: 	60
		numArgs: 	0


SocketStream>>flush
	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		recentlyRead: 	0
		socket: 	a Socket[destroyed]
		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...
		outBuffer: 	'inspectIt#Compiler newObjects sessionion

Upgrade: WebSocket

Con...etc...
		inNextToWrite: 	2445
		outNextToWrite: 	25
		lastRead: 	2444
		timeout: 	3000
		autoFlush: 	true
		bufferSize: 	4096
		binary: 	false
		shouldSignal: 	true


WebSocket07>>send:code:final:mask:
	Receiver: WebSocket07(127.0.0.1:54625)
	Arguments and temporary variables: 
		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil
	Receiver's instance variables: 
		name: 	'127.0.0.1:54625'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:final:
	Receiver: WebSocket07(127.0.0.1:54625)
	Arguments and temporary variables: 
		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
	Receiver's instance variables: 
		name: 	'127.0.0.1:54625'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:code:
	Receiver: WebSocket07(127.0.0.1:54625)
	Arguments and temporary variables: 
		data: 	'inspectIt#Compiler new'
		opcode: 	1
	Receiver's instance variables: 
		name: 	'127.0.0.1:54625'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


WebSocket07>>send:
	Receiver: WebSocket07(127.0.0.1:54625)
	Arguments and temporary variables: 
		aStringOrBytes: 	'inspectIt#Compiler new'
	Receiver's instance variables: 
		name: 	'127.0.0.1:54625'
		process: 	nil
		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]
		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...
		frameType: 	nil
		frameData: 	nil
		closing: 	false
		masking: 	false


ToolAmberWorkspace>>inspectIt
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(361758720) a PluggableTextMorph(69...etc...
		contents: 	a Text for 'Compiler new'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
	Receiver: a ToolAmberWorkspace
	Arguments and temporary variables: 
		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(692060160)
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a SystemWindow(361758720) a PluggableTextMorph(69...etc...
		contents: 	a Text for 'Compiler new'
		bindings: 	nil
		acceptDroppedMorphs: 	false
		acceptAction: 	nil
		mustDeclareVariables: 	false
		fileName: 	nil
		lineEnding: 	#crlf
		encoding: 	'utf-8'
		stylingActive: 	true
		client: 	an ObjectAmberClient


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[997@153 mouseUp 240516515 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	956@145 corner: 1066@159
		owner: 	a MenuMorph(437256192)
		submorphs: 	#()
		fullBounds: 	956@145 corner: 1066@159
		color: 	Color black
		extension: 	a MorphExtension (526385152)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(692060160))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[997@153 mouseUp 240516515 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	956@145 corner: 1066@159
		owner: 	a MenuMorph(437256192)
		submorphs: 	#()
		fullBounds: 	956@145 corner: 1066@159
		color: 	Color black
		extension: 	a MorphExtension (526385152)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(692060160))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Arguments and temporary variables: 
		evt: 	[997@153 mouseUp 240516515 nil]
	Receiver's instance variables: 
		bounds: 	956@145 corner: 1066@159
		owner: 	a MenuMorph(437256192)
		submorphs: 	#()
		fullBounds: 	956@145 corner: 1066@159
		color: 	Color black
		extension: 	a MorphExtension (526385152)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(692060160))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
	Receiver's instance variables: 
		bounds: 	956@145 corner: 1066@159
		owner: 	a MenuMorph(437256192)
		submorphs: 	#()
		fullBounds: 	956@145 corner: 1066@159
		color: 	Color black
		extension: 	a MorphExtension (526385152)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(692060160))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [997@153 mouseUp 240516515 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Receiver's instance variables: 
		timeStamp: 	240516515
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	997@153
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
	Receiver's instance variables: 
		bounds: 	956@145 corner: 1066@159
		owner: 	a MenuMorph(437256192)
		submorphs: 	#()
		fullBounds: 	956@145 corner: 1066@159
		color: 	Color black
		extension: 	a MorphExtension (526385152)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(692060160))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		aMorph: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		aMorph: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(516161536)'Inspect it on...'
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	956@145 corner: 1066@159
		owner: 	a MenuMorph(437256192)
		submorphs: 	#()
		fullBounds: 	956@145 corner: 1066@159
		color: 	Color black
		extension: 	a MorphExtension (526385152)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Inspect it on...'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a ToolAmberWorkspace
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#inspectIt a PluggableTextMorph(692060160))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		aMorph: 	a MenuMorph(437256192)
		localEvt: 	[997@153 mouseUp 240516515 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(353370112)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		aMorph: 	a MenuMorph(437256192)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(437256192)
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	951@102 corner: 1071@280
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(353370112)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	951@102 corner: 1071@280
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (452198400) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(353370112)'Do it on...' a...etc...


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(437256192)
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
	Receiver's instance variables: 
		bounds: 	951@102 corner: 1071@280
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(353370112)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	951@102 corner: 1071@280
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (452198400) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(353370112)'Do it on...' a...etc...


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(437256192)
	Arguments and temporary variables: 
		evt: 	[997@153 mouseUp 240516515 nil]
	Receiver's instance variables: 
		bounds: 	951@102 corner: 1071@280
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(353370112)'Do it on...' a ToggleMenuI...etc...
		fullBounds: 	951@102 corner: 1071@280
		color: 	(Color r: 0.848 g: 0.848 b: 0.848)
		extension: 	a MorphExtension (452198400) [other:  (basicColor -> (Color r: 0.745...etc...
		borderWidth: 	2
		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)
		defaultTarget: 	a ToolAmberWorkspace
		selectedItem: 	a ToggleMenuItemMorph(516161536)'Inspect it on...'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(353370112)'Do it on...' a...etc...


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		focusHolder: 	a MenuMorph(437256192)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	997@153 corner: 1013@169
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	997@153 corner: 1013@169
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(382730240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[997@153 mouseUp 240516515 nil]
		targetOffset: 	41@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 240516515 997 153 0 0 1 1)
		lastKeyScanCode: 	54
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(24641536) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[997@153 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1350@689
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(24641536) a Syst...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.97 g: 0.98 b: 1.0)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		focusHolder: 	a MenuMorph(437256192)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	997@153 corner: 1013@169
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	997@153 corner: 1013@169
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(382730240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[997@153 mouseUp 240516515 nil]
		targetOffset: 	41@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 240516515 997 153 0 0 1 1)
		lastKeyScanCode: 	54
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
		focusHolder: 	a MenuMorph(437256192)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	997@153 corner: 1013@169
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	997@153 corner: 1013@169
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(382730240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[997@153 mouseUp 240516515 nil]
		targetOffset: 	41@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 240516515 997 153 0 0 1 1)
		lastKeyScanCode: 	54
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[997@153 mouseUp 240516515 nil]
	Receiver's instance variables: 
		bounds: 	997@153 corner: 1013@169
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	997@153 corner: 1013@169
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(382730240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[997@153 mouseUp 240516515 nil]
		targetOffset: 	41@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 240516515 997 153 0 0 1 1)
		lastKeyScanCode: 	54
		combinedChar: 	nil



--- The full stack ---
Socket(Object)>>primitiveFailed:
Socket(Object)>>primitiveFailed
Socket>>primSocketSendDone:
Socket>>waitForSendDoneFor:
Socket>>sendSomeData:startIndex:count:for:
Socket>>sendSomeData:startIndex:count:
Socket>>sendData:count:
[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush
BlockClosure>>on:do:
SocketStream>>flush
WebSocket07>>send:code:final:mask:
WebSocket07>>send:code:final:
WebSocket07>>send:code:
WebSocket07>>send:
ToolAmberWorkspace>>inspectIt
ToolAmberWorkspace(StringHolder)>>perform:orSendTo:
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
PasteUpMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
PluggableTextMorph>>yellowButtonActivity:
PluggableTextMorph(ScrollPane)>>mouseDown:
PluggableTextMorph(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
PluggableTextMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PluggableTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>dispatchEvent:with:
PasteUpMorph(Morph)>>processEvent:using:
PasteUpMorph>>processEvent:using:
PasteUpMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE

MessageNotUnderstood: ToolAmberWorkspace>>send:

15 September 2013 11:40:24 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



ToolAmberWorkspace(Object)>>doesNotUnderstand: #send:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		aMessage: 	send: 'inspectIt#OrderedCollection with: ''0'' with: 1 with: ''two''....etc...
		exception: 	MessageNotUnderstood: ToolAmberWorkspace>>send:
		resumeValue: 	nil

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'OrderedCollection with: ''0'' with: 1 with: ''two''.'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 



	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'OrderedCollection with: ''0'' with: 1 with: ''two''.'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1006108672)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'OrderedCollection with: ''0'' with: 1 with: ''two''.'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[351@83 mouseUp 336550546 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	311@78 corner: 421@92

		owner: 	a MenuMorph(135004160)

		submorphs: 	#()

		fullBounds: 	311@78 corner: 421@92

		color: 	Color black

		extension: 	a MorphExtension (224133120)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[351@83 mouseUp 336550546 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	311@78 corner: 421@92

		owner: 	a MenuMorph(135004160)

		submorphs: 	#()

		fullBounds: 	311@78 corner: 421@92

		color: 	Color black

		extension: 	a MorphExtension (224133120)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[351@83 mouseUp 336550546 nil]

	Receiver's instance variables: 

		bounds: 	311@78 corner: 421@92

		owner: 	a MenuMorph(135004160)

		submorphs: 	#()

		fullBounds: 	311@78 corner: 421@92

		color: 	Color black

		extension: 	a MorphExtension (224133120)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]

	Receiver's instance variables: 

		bounds: 	311@78 corner: 421@92

		owner: 	a MenuMorph(135004160)

		submorphs: 	#()

		fullBounds: 	311@78 corner: 421@92

		color: 	Color black

		extension: 	a MorphExtension (224133120)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [351@83 mouseUp 336550546 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	336550546

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	351@83

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]

	Receiver's instance variables: 

		bounds: 	311@78 corner: 421@92

		owner: 	a MenuMorph(135004160)

		submorphs: 	#()

		fullBounds: 	311@78 corner: 421@92

		color: 	Color black

		extension: 	a MorphExtension (224133120)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		aMorph: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		aMorph: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(213909504)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	311@78 corner: 421@92

		owner: 	a MenuMorph(135004160)

		submorphs: 	#()

		fullBounds: 	311@78 corner: 421@92

		color: 	Color black

		extension: 	a MorphExtension (224133120)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		aMorph: 	a MenuMorph(135004160)
		localEvt: 	[351@83 mouseUp 336550546 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuItemM...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		aMorph: 	a MenuMorph(135004160)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(135004160)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	306@35 corner: 426@213

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuIt...etc...

		fullBounds: 	306@35 corner: 426@213

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (149946368) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(51118080)'Do it on...' a ...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(135004160)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]

	Receiver's instance variables: 

		bounds: 	306@35 corner: 426@213

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuIt...etc...

		fullBounds: 	306@35 corner: 426@213

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (149946368) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(51118080)'Do it on...' a ...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(135004160)

	Arguments and temporary variables: 

		evt: 	[351@83 mouseUp 336550546 nil]

	Receiver's instance variables: 

		bounds: 	306@35 corner: 426@213

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuIt...etc...

		fullBounds: 	306@35 corner: 426@213

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (149946368) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(51118080)'Do it on...' a ...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		focusHolder: 	a MenuMorph(135004160)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	351@83 corner: 367@99

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(572522496)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[351@83 351@83 mouseMove 336550265 nil]

		targetOffset: 	40@5

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 336550265 351 83 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(260308992) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[351@83 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(260308992) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		focusHolder: 	a MenuMorph(135004160)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	351@83 corner: 367@99

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(572522496)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[351@83 351@83 mouseMove 336550265 nil]

		targetOffset: 	40@5

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 336550265 351 83 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		focusHolder: 	a MenuMorph(135004160)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	351@83 corner: 367@99

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(572522496)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[351@83 351@83 mouseMove 336550265 nil]

		targetOffset: 	40@5

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 336550265 351 83 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]

	Receiver's instance variables: 

		bounds: 	351@83 corner: 367@99

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(572522496)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[351@83 351@83 mouseMove 336550265 nil]

		targetOffset: 	40@5

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 336550265 351 83 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>handleEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[351@83 mouseUp 336550546 nil]
		evt: 	[351@83 mouseUp 336550546 nil]
		ofs: 	nil

	Receiver's instance variables: 

		bounds: 	351@83 corner: 367@99

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(572522496)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[351@83 351@83 mouseMove 336550265 nil]

		targetOffset: 	40@5

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 336550265 351 83 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>processEvents

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		evt: 	[351@83 mouseUp 336550546 nil]
		evtBuf: 	#(1 336550546 351 83 0 0 1 1)
		type: 	1
		hadAny: 	false

	Receiver's instance variables: 

		bounds: 	351@83 corner: 367@99

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(572522496)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[351@83 351@83 mouseMove 336550265 nil]

		targetOffset: 	40@5

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 336550265 351 83 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		h: 	a HandMorph(843055104)

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(260308992))(a PreDebu...etc...

		lastStepTime: 	952664

		lastStepMessage: 	nil

		lastCycleTime: 	952703

		alarms: 	a Heap()

		lastAlarmTime: 	952664

		menuBuilder: 	a PragmaMenuBuilder





Array(SequenceableCollection)>>do:

	Receiver: an Array(a HandMorph(843055104))

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1

	Receiver's instance variables: 

an Array(a HandMorph(843055104))



WorldState>>handsDo:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(260308992))(a PreDebu...etc...

		lastStepTime: 	952664

		lastStepMessage: 	nil

		lastCycleTime: 	952703

		alarms: 	a Heap()

		lastAlarmTime: 	952664

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(260308992))(a PreDebu...etc...

		lastStepTime: 	952664

		lastStepMessage: 	nil

		lastCycleTime: 	952703

		alarms: 	a Heap()

		lastAlarmTime: 	952664

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(260308992))(a PreDebu...etc...

		lastStepTime: 	952664

		lastStepMessage: 	nil

		lastCycleTime: 	952703

		alarms: 	a Heap()

		lastAlarmTime: 	952664

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneSubCycleFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]
		currentHand: 	a HandMorph(843055104)

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(260308992))(a PreDebu...etc...

		lastStepTime: 	952664

		lastStepMessage: 	nil

		lastCycleTime: 	952703

		alarms: 	a Heap()

		lastAlarmTime: 	952664

		menuBuilder: 	a PragmaMenuBuilder





PasteUpMorph>>doOneSubCycle

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(260308992) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





MenuMorph>>invokeModalAt:in:allowKeyboard:

	Receiver: a MenuMorph(135004160)

	Arguments and temporary variables: 

		aPoint: 	308@43
		aWorld: 	a PasteUpMorph(425197568) [world]
		aBoolean: 	true
		w: 	a PasteUpMorph(425197568) [world]
		originalFocusHolder: 	a TextMorphForEditView(971767808)

	Receiver's instance variables: 

		bounds: 	306@35 corner: 426@213

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuIt...etc...

		fullBounds: 	306@35 corner: 426@213

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (149946368) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(51118080)'Do it on...' a ...etc...





MenuMorph>>invokeModal:

	Receiver: a MenuMorph(135004160)

	Arguments and temporary variables: 

		allowKeyboardControl: 	true

	Receiver's instance variables: 

		bounds: 	306@35 corner: 426@213

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuIt...etc...

		fullBounds: 	306@35 corner: 426@213

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (149946368) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(51118080)'Do it on...' a ...etc...





MenuMorph>>invokeModal

	Receiver: a MenuMorph(135004160)

	Arguments and temporary variables: 



	Receiver's instance variables: 

		bounds: 	306@35 corner: 426@213

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(51118080)'Do it on...' a ToggleMenuIt...etc...

		fullBounds: 	306@35 corner: 426@213

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (149946368) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(213909504)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(51118080)'Do it on...' a ...etc...





PluggableTextMorph>>yellowButtonActivity:

	Receiver: a PluggableTextMorph(1006108672)

	Arguments and temporary variables: 

		shiftKeyState: 	false
		menu: 	a MenuMorph(135004160)

	Receiver's instance variables: 

		bounds: 	16@36 corner: 456@203

		owner: 	a SystemWindow(328466432)

		submorphs: 	an Array(a TransformMorph(1059323904))

		fullBounds: 	16@36 corner: 456@203

		color: 	Color white

		extension: 	a MorphExtension (950534144) [locked] 

		borderWidth: 	1

		borderColor: 	(Color r: 0.706 g: 0.706 b: 0.706)

		model: 	a ToolAmberWorkspace

		slotName: 	nil

		open: 	false

		scrollBar: 	a ScrollBar(1033633792)

		scroller: 	a TransformMorph(1059323904)

		retractableScrollBar: 	false

		scrollBarOnLeft: 	false

		getMenuSelector: 	#codePaneMenu:shifted:

		getMenuTitleSelector: 	nil

		hasFocus: 	true

		hScrollBar: 	a ScrollBar(1055916032)

		textMorph: 	a TextMorphForEditView(971767808)

		getTextSelector: 	#contents

		setTextSelector: 	#acceptContents:

		getSelectionSelector: 	nil

		hasUnacceptedEdits: 	false

		askBeforeDiscardingEdits: 	true

		selectionInterval: 	(1 to: 48)

		hasEditingConflicts: 	false

		acceptAction: 	nil

		getColorSelector: 	nil

		unstyledAcceptText: 	nil

		styler: 	a SHTextStylerST80

		autoAccept: 	nil

		enabled: 	true

		getEnabledSelector: 	nil

		highlights: 	an OrderedCollection()

		acceptOnFocusChange: 	nil

		selectionColor: 	nil

		alwaysAccept: 	nil







--- The full stack ---

ToolAmberWorkspace(Object)>>doesNotUnderstand: #send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

TextMorphForEditView>>mouseDown:

TextMorphForEditView(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

TextMorphForEditView(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TextMorphForEditView(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TransformMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 1:56:33 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	120192
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler new: 3.ocol Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler new: 3.ocol Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler new: 3.ocol Handshake

Upgrade: WebSocket

Connec...etc...
		n: 	24
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler new: 3.ocol Handshake

Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	25

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler new: 3.ocol Handshake

Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	25

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 



	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1006108672)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[237@89 mouseUp 107486000 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(948699136)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (1037828096)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[237@89 mouseUp 107486000 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(948699136)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (1037828096)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[237@89 mouseUp 107486000 nil]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(948699136)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (1037828096)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(948699136)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (1037828096)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [237@89 mouseUp 107486000 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	107486000

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	237@89

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(948699136)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (1037828096)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		aMorph: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		aMorph: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(1027604480)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(948699136)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (1037828096)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		aMorph: 	a MenuMorph(948699136)
		localEvt: 	[237@89 mouseUp 107486000 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(864813056)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		aMorph: 	a MenuMorph(948699136)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(948699136)

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	194@44 corner: 314@222

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(864813056)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	194@44 corner: 314@222

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (963641344) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(864813056)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(948699136)

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]

	Receiver's instance variables: 

		bounds: 	194@44 corner: 314@222

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(864813056)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	194@44 corner: 314@222

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (963641344) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(864813056)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(948699136)

	Arguments and temporary variables: 

		evt: 	[237@89 mouseUp 107486000 nil]

	Receiver's instance variables: 

		bounds: 	194@44 corner: 314@222

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(864813056)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	194@44 corner: 314@222

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (963641344) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(1027604480)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(864813056)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		focusHolder: 	a MenuMorph(948699136)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	237@89 corner: 253@105

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(80740352)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[237@89 mouseUp 107486000 nil]

		targetOffset: 	38@2

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107486000 237 89 0 0 1 1)

		lastKeyScanCode: 	240

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(789577728) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[237@89 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(789577728) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		focusHolder: 	a MenuMorph(948699136)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	237@89 corner: 253@105

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(80740352)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[237@89 mouseUp 107486000 nil]

		targetOffset: 	38@2

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107486000 237 89 0 0 1 1)

		lastKeyScanCode: 	240

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]
		focusHolder: 	a MenuMorph(948699136)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	237@89 corner: 253@105

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(80740352)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[237@89 mouseUp 107486000 nil]

		targetOffset: 	38@2

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107486000 237 89 0 0 1 1)

		lastKeyScanCode: 	240

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[237@89 mouseUp 107486000 nil]

	Receiver's instance variables: 

		bounds: 	237@89 corner: 253@105

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(80740352)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[237@89 mouseUp 107486000 nil]

		targetOffset: 	38@2

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107486000 237 89 0 0 1 1)

		lastKeyScanCode: 	240

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

TextMorphForEditView>>mouseDown:

TextMorphForEditView(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

TextMorphForEditView(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TextMorphForEditView(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TransformMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 1:57:01 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	148047
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newade: WebSo...etc...
		startIndex: 	1
		count: 	48
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newade: WebSo...etc...
		startIndex: 	1
		count: 	48

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newinspectIt#Compiler newade: WebSocket

Connec...etc...
		n: 	48
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newade: WebSocket

Con...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	49

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newade: WebSocket

Con...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	49

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 



	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(167510016)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[167@98 mouseUp 107513859 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	132@89 corner: 242@103

		owner: 	a MenuMorph(904658944)

		submorphs: 	#()

		fullBounds: 	132@89 corner: 242@103

		color: 	Color black

		extension: 	a MorphExtension (993787904)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[167@98 mouseUp 107513859 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	132@89 corner: 242@103

		owner: 	a MenuMorph(904658944)

		submorphs: 	#()

		fullBounds: 	132@89 corner: 242@103

		color: 	Color black

		extension: 	a MorphExtension (993787904)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[167@98 mouseUp 107513859 nil]

	Receiver's instance variables: 

		bounds: 	132@89 corner: 242@103

		owner: 	a MenuMorph(904658944)

		submorphs: 	#()

		fullBounds: 	132@89 corner: 242@103

		color: 	Color black

		extension: 	a MorphExtension (993787904)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]

	Receiver's instance variables: 

		bounds: 	132@89 corner: 242@103

		owner: 	a MenuMorph(904658944)

		submorphs: 	#()

		fullBounds: 	132@89 corner: 242@103

		color: 	Color black

		extension: 	a MorphExtension (993787904)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [167@98 mouseUp 107513859 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	107513859

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	167@98

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]

	Receiver's instance variables: 

		bounds: 	132@89 corner: 242@103

		owner: 	a MenuMorph(904658944)

		submorphs: 	#()

		fullBounds: 	132@89 corner: 242@103

		color: 	Color black

		extension: 	a MorphExtension (993787904)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		aMorph: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		aMorph: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(983564288)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	132@89 corner: 242@103

		owner: 	a MenuMorph(904658944)

		submorphs: 	#()

		fullBounds: 	132@89 corner: 242@103

		color: 	Color black

		extension: 	a MorphExtension (993787904)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		aMorph: 	a MenuMorph(904658944)
		localEvt: 	[167@98 mouseUp 107513859 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(820772864)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		aMorph: 	a MenuMorph(904658944)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(904658944)

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	127@46 corner: 247@224

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(820772864)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	127@46 corner: 247@224

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (919601152) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(820772864)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(904658944)

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]

	Receiver's instance variables: 

		bounds: 	127@46 corner: 247@224

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(820772864)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	127@46 corner: 247@224

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (919601152) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(820772864)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(904658944)

	Arguments and temporary variables: 

		evt: 	[167@98 mouseUp 107513859 nil]

	Receiver's instance variables: 

		bounds: 	127@46 corner: 247@224

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(820772864)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	127@46 corner: 247@224

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (919601152) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(983564288)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(820772864)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		focusHolder: 	a MenuMorph(904658944)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	167@98 corner: 183@114

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(61603840)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[167@98 mouseUp 107513859 nil]

		targetOffset: 	35@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107513859 167 98 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(771227648) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[167@98 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(771227648) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		focusHolder: 	a MenuMorph(904658944)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	167@98 corner: 183@114

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(61603840)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[167@98 mouseUp 107513859 nil]

		targetOffset: 	35@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107513859 167 98 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]
		focusHolder: 	a MenuMorph(904658944)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	167@98 corner: 183@114

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(61603840)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[167@98 mouseUp 107513859 nil]

		targetOffset: 	35@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107513859 167 98 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[167@98 mouseUp 107513859 nil]

	Receiver's instance variables: 

		bounds: 	167@98 corner: 183@114

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(61603840)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[167@98 mouseUp 107513859 nil]

		targetOffset: 	35@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107513859 167 98 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

TextMorphForEditView>>mouseDown:

TextMorphForEditView(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

TextMorphForEditView(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TextMorphForEditView(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TransformMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 1:57:43 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	190333
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newinspectI...etc...
		startIndex: 	1
		count: 	72
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newinspectI...etc...
		startIndex: 	1
		count: 	72

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compiler n...etc...
		n: 	72
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compile...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	73

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compile...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	73

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 



	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(167510016)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[252@94 mouseUp 107556156 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(1035468800)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (50855936)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[252@94 mouseUp 107556156 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(1035468800)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (50855936)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[252@94 mouseUp 107556156 nil]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(1035468800)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (50855936)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(1035468800)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (50855936)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [252@94 mouseUp 107556156 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	107556156

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	252@94

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(1035468800)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (50855936)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		aMorph: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		aMorph: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(40632320)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	199@87 corner: 309@101

		owner: 	a MenuMorph(1035468800)

		submorphs: 	#()

		fullBounds: 	199@87 corner: 309@101

		color: 	Color black

		extension: 	a MorphExtension (50855936)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		aMorph: 	a MenuMorph(1035468800)
		localEvt: 	[252@94 mouseUp 107556156 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(951582720)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		aMorph: 	a MenuMorph(1035468800)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(1035468800)

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	194@44 corner: 314@222

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(951582720)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	194@44 corner: 314@222

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (1050411008) [other:  (basicColor -> (Color r: 0.74...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(951582720)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(1035468800)

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]

	Receiver's instance variables: 

		bounds: 	194@44 corner: 314@222

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(951582720)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	194@44 corner: 314@222

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (1050411008) [other:  (basicColor -> (Color r: 0.74...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(951582720)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(1035468800)

	Arguments and temporary variables: 

		evt: 	[252@94 mouseUp 107556156 nil]

	Receiver's instance variables: 

		bounds: 	194@44 corner: 314@222

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(951582720)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	194@44 corner: 314@222

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (1050411008) [other:  (basicColor -> (Color r: 0.74...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(40632320)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(951582720)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		focusHolder: 	a MenuMorph(1035468800)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	252@94 corner: 268@110

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(164102144)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[252@94 mouseUp 107556156 nil]

		targetOffset: 	53@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107556156 252 94 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(927989760) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[252@94 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(927989760) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		focusHolder: 	a MenuMorph(1035468800)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	252@94 corner: 268@110

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(164102144)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[252@94 mouseUp 107556156 nil]

		targetOffset: 	53@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107556156 252 94 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]
		focusHolder: 	a MenuMorph(1035468800)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	252@94 corner: 268@110

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(164102144)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[252@94 mouseUp 107556156 nil]

		targetOffset: 	53@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107556156 252 94 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[252@94 mouseUp 107556156 nil]

	Receiver's instance variables: 

		bounds: 	252@94 corner: 268@110

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	nil

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(164102144)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[252@94 mouseUp 107556156 nil]

		targetOffset: 	53@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107556156 252 94 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

TextMorphForEditView>>mouseDown:

TextMorphForEditView(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

TextMorphForEditView(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TextMorphForEditView(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

TransformMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 1:58:22 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	229596
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newinspectI...etc...
		startIndex: 	1
		count: 	96
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newinspectI...etc...
		startIndex: 	1
		count: 	96

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compiler n...etc...
		n: 	96
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compile...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	97

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compile...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	97

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 



	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(167510016)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[240@113 mouseUp 107595421 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	194@102 corner: 304@116

		owner: 	a MenuMorph(848560128)

		submorphs: 	#()

		fullBounds: 	194@102 corner: 304@116

		color: 	Color black

		extension: 	a MorphExtension (937689088)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[240@113 mouseUp 107595421 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	194@102 corner: 304@116

		owner: 	a MenuMorph(848560128)

		submorphs: 	#()

		fullBounds: 	194@102 corner: 304@116

		color: 	Color black

		extension: 	a MorphExtension (937689088)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[240@113 mouseUp 107595421 nil]

	Receiver's instance variables: 

		bounds: 	194@102 corner: 304@116

		owner: 	a MenuMorph(848560128)

		submorphs: 	#()

		fullBounds: 	194@102 corner: 304@116

		color: 	Color black

		extension: 	a MorphExtension (937689088)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]

	Receiver's instance variables: 

		bounds: 	194@102 corner: 304@116

		owner: 	a MenuMorph(848560128)

		submorphs: 	#()

		fullBounds: 	194@102 corner: 304@116

		color: 	Color black

		extension: 	a MorphExtension (937689088)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [240@113 mouseUp 107595421 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	107595421

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	240@113

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]

	Receiver's instance variables: 

		bounds: 	194@102 corner: 304@116

		owner: 	a MenuMorph(848560128)

		submorphs: 	#()

		fullBounds: 	194@102 corner: 304@116

		color: 	Color black

		extension: 	a MorphExtension (937689088)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		aMorph: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		aMorph: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(927465472)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	194@102 corner: 304@116

		owner: 	a MenuMorph(848560128)

		submorphs: 	#()

		fullBounds: 	194@102 corner: 304@116

		color: 	Color black

		extension: 	a MorphExtension (937689088)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		aMorph: 	a MenuMorph(848560128)
		localEvt: 	[240@113 mouseUp 107595421 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		aMorph: 	a MenuMorph(848560128)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(848560128)

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	189@59 corner: 309@237

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	189@59 corner: 309@237

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (863502336) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(764674048)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(848560128)

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]

	Receiver's instance variables: 

		bounds: 	189@59 corner: 309@237

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	189@59 corner: 309@237

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (863502336) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(764674048)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(848560128)

	Arguments and temporary variables: 

		evt: 	[240@113 mouseUp 107595421 nil]

	Receiver's instance variables: 

		bounds: 	189@59 corner: 309@237

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(764674048)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	189@59 corner: 309@237

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (863502336) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(927465472)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(764674048)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		focusHolder: 	a MenuMorph(848560128)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	240@113 corner: 256@129

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	240@113 corner: 256@129

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(293076992)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[240@113 mouseUp 107595421 nil]

		targetOffset: 	46@11

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107595421 240 113 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1056964608) a Sy...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[240@113 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1056964608) a Sy...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		focusHolder: 	a MenuMorph(848560128)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	240@113 corner: 256@129

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	240@113 corner: 256@129

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(293076992)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[240@113 mouseUp 107595421 nil]

		targetOffset: 	46@11

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107595421 240 113 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]
		focusHolder: 	a MenuMorph(848560128)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	240@113 corner: 256@129

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	240@113 corner: 256@129

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(293076992)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[240@113 mouseUp 107595421 nil]

		targetOffset: 	46@11

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107595421 240 113 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[240@113 mouseUp 107595421 nil]

	Receiver's instance variables: 

		bounds: 	240@113 corner: 256@129

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	240@113 corner: 256@129

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(293076992)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[240@113 mouseUp 107595421 nil]

		targetOffset: 	46@11

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107595421 240 113 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

PluggableTextMorph(ScrollPane)>>mouseDown:

PluggableTextMorph(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

PluggableTextMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 1:58:48 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	255783
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newinspectI...etc...
		startIndex: 	1
		count: 	120
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newinspectIt#Compiler newinspectI...etc...
		startIndex: 	1
		count: 	120

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compiler n...etc...
		n: 	120
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 213 0 20 0 0 0 0 208 12 13 4]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compile...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	121

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	431

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newinspectIt#Compiler newinspectIt#Compile...etc...

		inNextToWrite: 	1117

		outNextToWrite: 	121

		lastRead: 	1116

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:59013)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:59013'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 



	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(167510016)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(820772864) a PluggableTextMorph(16...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	nil





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[247@129 mouseUp 107621593 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	213@121 corner: 323@135

		owner: 	a MenuMorph(961019904)

		submorphs: 	#()

		fullBounds: 	213@121 corner: 323@135

		color: 	Color black

		extension: 	a MorphExtension (1050148864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[247@129 mouseUp 107621593 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	213@121 corner: 323@135

		owner: 	a MenuMorph(961019904)

		submorphs: 	#()

		fullBounds: 	213@121 corner: 323@135

		color: 	Color black

		extension: 	a MorphExtension (1050148864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[247@129 mouseUp 107621593 nil]

	Receiver's instance variables: 

		bounds: 	213@121 corner: 323@135

		owner: 	a MenuMorph(961019904)

		submorphs: 	#()

		fullBounds: 	213@121 corner: 323@135

		color: 	Color black

		extension: 	a MorphExtension (1050148864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]

	Receiver's instance variables: 

		bounds: 	213@121 corner: 323@135

		owner: 	a MenuMorph(961019904)

		submorphs: 	#()

		fullBounds: 	213@121 corner: 323@135

		color: 	Color black

		extension: 	a MorphExtension (1050148864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [247@129 mouseUp 107621593 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	107621593

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	247@129

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]

	Receiver's instance variables: 

		bounds: 	213@121 corner: 323@135

		owner: 	a MenuMorph(961019904)

		submorphs: 	#()

		fullBounds: 	213@121 corner: 323@135

		color: 	Color black

		extension: 	a MorphExtension (1050148864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		aMorph: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		aMorph: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(1039925248)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	213@121 corner: 323@135

		owner: 	a MenuMorph(961019904)

		submorphs: 	#()

		fullBounds: 	213@121 corner: 323@135

		color: 	Color black

		extension: 	a MorphExtension (1050148864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(167510016))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		aMorph: 	a MenuMorph(961019904)
		localEvt: 	[247@129 mouseUp 107621593 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(877133824)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		aMorph: 	a MenuMorph(961019904)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(961019904)

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	208@78 corner: 328@256

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(877133824)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	208@78 corner: 328@256

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(877133824)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(961019904)

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]

	Receiver's instance variables: 

		bounds: 	208@78 corner: 328@256

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(877133824)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	208@78 corner: 328@256

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(877133824)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(961019904)

	Arguments and temporary variables: 

		evt: 	[247@129 mouseUp 107621593 nil]

	Receiver's instance variables: 

		bounds: 	208@78 corner: 328@256

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(877133824)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	208@78 corner: 328@256

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (975962112) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(1039925248)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(877133824)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		focusHolder: 	a MenuMorph(961019904)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	247@129 corner: 263@145

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	247@129 corner: 263@145

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(374865920)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[247@129 mouseUp 107621593 nil]

		targetOffset: 	34@8

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107621593 247 129 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(386400256) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[247@129 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(386400256) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		focusHolder: 	a MenuMorph(961019904)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	247@129 corner: 263@145

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	247@129 corner: 263@145

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(374865920)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[247@129 mouseUp 107621593 nil]

		targetOffset: 	34@8

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107621593 247 129 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]
		focusHolder: 	a MenuMorph(961019904)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	247@129 corner: 263@145

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	247@129 corner: 263@145

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(374865920)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[247@129 mouseUp 107621593 nil]

		targetOffset: 	34@8

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107621593 247 129 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[247@129 mouseUp 107621593 nil]

	Receiver's instance variables: 

		bounds: 	247@129 corner: 263@145

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	247@129 corner: 263@145

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(374865920)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[247@129 mouseUp 107621593 nil]

		targetOffset: 	34@8

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107621593 247 129 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

PluggableTextMorph(ScrollPane)>>mouseDown:

PluggableTextMorph(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

PluggableTextMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

Halt

17 September 2013 1:59:18 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



AmberObjectMirror>>halt

	Receiver: an AmberObjectMirror(nil)

	Arguments and temporary variables: 



	Receiver's instance variables: 

an AmberObjectMirror(nil)



AmberObjectMirror>>updateContents

	Receiver: an AmberObjectMirror(nil)

	Arguments and temporary variables: 

		r: 	WebSocket07(127.0.0.1:60592)

	Receiver's instance variables: 

an AmberObjectMirror(nil)



AmberObjectMirrorInspector>>inspectSelection

	Receiver: an AmberObjectMirrorInspector

	Arguments and temporary variables: 



	Receiver's instance variables: 

		contents: 	'an AmberObjectMirror(nil)'

		object: 	an AmberObjectMirror(a Compiler)

		selectionIndex: 	6

		timeOfLastListUpdate: 	279028

		selectionUpdateTime: 	0





PluggableListMorph>>doubleClick:

	Receiver: a PluggableListMorph(231473152)

	Arguments and temporary variables: 

		event: 	[372@191 mouseDown red 107651171 nil]
		index: 	6

	Receiver's instance variables: 

		bounds: 	330@111 corner: 465@301

		owner: 	a SystemWindow(439615488)

		submorphs: 	an Array(a TransformMorph(287571968))

		fullBounds: 	330@111 corner: 465@301

		color: 	Color white

		extension: 	a MorphExtension (934805504) [locked]  [other:  (selectionColor -> (...etc...

		borderWidth: 	1

		borderColor: 	(Color r: 0.745 g: 0.745 b: 0.745)

		model: 	an AmberObjectMirrorInspector

		slotName: 	nil

		open: 	false

		scrollBar: 	a ScrollBar(260571136)

		scroller: 	a TransformMorph(287571968)

		retractableScrollBar: 	false

		scrollBarOnLeft: 	false

		getMenuSelector: 	#fieldListMenu:

		getMenuTitleSelector: 	nil

		hasFocus: 	true

		hScrollBar: 	a ScrollBar(284164096)

		list: 	#('self' 'all inst vars' 'currentClass' 'unknownVariables' 'codeGenerator...etc...

		getListSelector: 	#fieldList

		getListSizeSelector: 	nil

		getListElementSelector: 	nil

		getIndexSelector: 	#selectionIndex

		setIndexSelector: 	#toggleIndex:

		keystrokeActionSelector: 	#inspectorKey:from:

		autoDeselect: 	false

		lastKeystrokeTime: 	0

		lastKeystrokes: 	''

		doubleClickSelector: 	#inspectSelection

		handlesBasicKeys: 	nil

		potentialDropRow: 	nil

		listMorph: 	a LazyListMorph(131334144)

		hScrollRangeCache: 	nil

		dragItemSelector: 	nil

		dropItemSelector: 	nil

		wantsDropSelector: 	nil

		wrapSelector: 	nil

		searchedElement: 	nil

		multipleSelection: 	false

		dragOnOrOff: 	nil

		setSelectionListSelector: 	nil

		getSelectionListSelector: 	nil

		resetListSelector: 	nil





MouseClickState>>doubleClick

	Receiver: a MouseClickState[#secondClickDown]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		clickClient: 	a PluggableListMorph(231473152)

		clickState: 	#secondClickDown

		firstClickDown: 	[372@191 mouseDown red 107651171 nil]

		firstClickUp: 	[372@191 mouseUp 107651265 nil]

		firstClickTime: 	107651171

		clickSelector: 	#click:

		dblClickSelector: 	#doubleClick:

		dblClickTime: 	350

		dblClickTimeoutSelector: 	nil

		dragSelector: 	nil

		dragThreshold: 	10





MouseClickState>>handleEvent:from:

	Receiver: a MouseClickState[#secondClickDown]

	Arguments and temporary variables: 

		evt: 	[372@191 mouseUp 107651468 nil]
		aHand: 	a HandMorph(843055104)
		localEvt: 	[372@191 mouseUp 107651468 nil]
		timedOut: 	false
		isDrag: 	false

	Receiver's instance variables: 

		clickClient: 	a PluggableListMorph(231473152)

		clickState: 	#secondClickDown

		firstClickDown: 	[372@191 mouseDown red 107651171 nil]

		firstClickUp: 	[372@191 mouseUp 107651265 nil]

		firstClickTime: 	107651171

		clickSelector: 	#click:

		dblClickSelector: 	#doubleClick:

		dblClickTime: 	350

		dblClickTimeoutSelector: 	nil

		dragSelector: 	nil

		dragThreshold: 	10





HandMorph>>handleEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[372@191 mouseUp 107651468 nil]
		evt: 	[372@191 mouseUp 107651468 nil]
		ofs: 	nil

	Receiver's instance variables: 

		bounds: 	372@191 corner: 388@207

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	372@191 corner: 388@207

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(902037504)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[372@191 mouseUp 107651468 nil]

		targetOffset: 	42@80

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107651468 372 191 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>processEvents

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		evt: 	[372@191 mouseUp 107651468 nil]
		evtBuf: 	#(1 107651468 372 191 0 0 1 1)
		type: 	1
		hadAny: 	false

	Receiver's instance variables: 

		bounds: 	372@191 corner: 388@207

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	372@191 corner: 388@207

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(902037504)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[372@191 mouseUp 107651468 nil]

		targetOffset: 	42@80

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107651468 372 191 0 0 1 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		h: 	a HandMorph(843055104)

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(673185792))(a PreDebu...etc...

		lastStepTime: 	285622

		lastStepMessage: 	nil

		lastCycleTime: 	285672

		alarms: 	a Heap()

		lastAlarmTime: 	285622

		menuBuilder: 	a PragmaMenuBuilder





Array(SequenceableCollection)>>do:

	Receiver: an Array(a HandMorph(843055104))

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1

	Receiver's instance variables: 

an Array(a HandMorph(843055104))



WorldState>>handsDo:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(673185792))(a PreDebu...etc...

		lastStepTime: 	285622

		lastStepMessage: 	nil

		lastCycleTime: 	285672

		alarms: 	a Heap()

		lastAlarmTime: 	285622

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(673185792))(a PreDebu...etc...

		lastStepTime: 	285622

		lastStepMessage: 	nil

		lastCycleTime: 	285672

		alarms: 	a Heap()

		lastAlarmTime: 	285622

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(673185792))(a PreDebu...etc...

		lastStepTime: 	285622

		lastStepMessage: 	nil

		lastCycleTime: 	285672

		alarms: 	a Heap()

		lastAlarmTime: 	285622

		menuBuilder: 	a PragmaMenuBuilder





PasteUpMorph>>doOneCycle

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(673185792) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

	Receiver: Project

	Arguments and temporary variables: 



	Receiver's instance variables: 

		superclass: 	Model

		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...

		format: 	132

		instanceVariables: 	nil

		organization: 	('*sound' beep)


		subclasses: 	nil

		name: 	#Project

		classPool: 	a Dictionary(#UIProcess->a Process in nil )

		sharedPools: 	nil

		environment: 	a SystemDictionary(lots of globals)

		category: 	#'System-Support'

		traitComposition: 	{}

		localSelectors: 	nil





[self value.
	Processor terminateActive] in BlockClosure>>newProcess

	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		outerContext: 	Project class>>spawnNewProcess

		startpc: 	57

		numArgs: 	0







--- The full stack ---

AmberObjectMirror>>halt

AmberObjectMirror>>updateContents

AmberObjectMirrorInspector>>inspectSelection

PluggableListMorph>>doubleClick:

MouseClickState>>doubleClick

MouseClickState>>handleEvent:from:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

Halt

17 September 2013 1:59:25 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



AmberObjectMirror>>halt

	Receiver: an AmberObjectMirror(nil)

	Arguments and temporary variables: 



	Receiver's instance variables: 

an AmberObjectMirror(nil)



AmberObjectMirror>>updateContents

	Receiver: an AmberObjectMirror(nil)

	Arguments and temporary variables: 

		r: 	WebSocket07(127.0.0.1:60592)

	Receiver's instance variables: 

an AmberObjectMirror(nil)



AmberObjectMirrorInspector>>inspectSelection

	Receiver: an AmberObjectMirrorInspector

	Arguments and temporary variables: 



	Receiver's instance variables: 

		contents: 	'an AmberObjectMirror(nil)'

		object: 	an AmberObjectMirror(a Compiler)

		selectionIndex: 	6

		timeOfLastListUpdate: 	287127

		selectionUpdateTime: 	0





AmberObjectMirrorInspector(Object)>>perform:orSendTo:

	Receiver: an AmberObjectMirrorInspector

	Arguments and temporary variables: 

		selector: 	#inspectSelection
		otherTarget: 	a PluggableListMorph(231473152)

	Receiver's instance variables: 

		contents: 	'an AmberObjectMirror(nil)'

		object: 	an AmberObjectMirror(a Compiler)

		selectionIndex: 	6

		timeOfLastListUpdate: 	287127

		selectionUpdateTime: 	0





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Arguments and temporary variables: 

		evt: 	[423@192 mouseUp 107658265 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	385@183 corner: 615@201

		owner: 	a MenuMorph(741605376)

		submorphs: 	#()

		fullBounds: 	385@183 corner: 615@201

		color: 	Color black

		extension: 	a MorphExtension (90963968) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(231473152))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Arguments and temporary variables: 

		evt: 	[423@192 mouseUp 107658265 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	385@183 corner: 615@201

		owner: 	a MenuMorph(741605376)

		submorphs: 	#()

		fullBounds: 	385@183 corner: 615@201

		color: 	Color black

		extension: 	a MorphExtension (90963968) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(231473152))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Arguments and temporary variables: 

		evt: 	[423@192 mouseUp 107658265 nil]

	Receiver's instance variables: 

		bounds: 	385@183 corner: 615@201

		owner: 	a MenuMorph(741605376)

		submorphs: 	#()

		fullBounds: 	385@183 corner: 615@201

		color: 	Color black

		extension: 	a MorphExtension (90963968) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(231473152))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]

	Receiver's instance variables: 

		bounds: 	385@183 corner: 615@201

		owner: 	a MenuMorph(741605376)

		submorphs: 	#()

		fullBounds: 	385@183 corner: 615@201

		color: 	Color black

		extension: 	a MorphExtension (90963968) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(231473152))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [423@192 mouseUp 107658265 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Receiver's instance variables: 

		timeStamp: 	107658265

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	423@192

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]

	Receiver's instance variables: 

		bounds: 	385@183 corner: 615@201

		owner: 	a MenuMorph(741605376)

		submorphs: 	#()

		fullBounds: 	385@183 corner: 615@201

		color: 	Color black

		extension: 	a MorphExtension (90963968) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(231473152))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		aMorph: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		aMorph: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(80740352)'Inspect (i)'

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	385@183 corner: 615@201

		owner: 	a MenuMorph(741605376)

		submorphs: 	#()

		fullBounds: 	385@183 corner: 615@201

		color: 	Color black

		extension: 	a MorphExtension (90963968) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(231473152))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		aMorph: 	a MenuMorph(741605376)
		localEvt: 	[423@192 mouseUp 107658265 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ToggleMenuItemM...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		aMorph: 	a MenuMorph(741605376)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(741605376)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	380@178 corner: 620@462

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ToggleMenuIt...etc...

		fullBounds: 	380@178 corner: 620@462

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (756547584) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	an AmberObjectMirrorInspector

		selectedItem: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(741605376)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]

	Receiver's instance variables: 

		bounds: 	380@178 corner: 620@462

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ToggleMenuIt...etc...

		fullBounds: 	380@178 corner: 620@462

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (756547584) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	an AmberObjectMirrorInspector

		selectedItem: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(741605376)

	Arguments and temporary variables: 

		evt: 	[423@192 mouseUp 107658265 nil]

	Receiver's instance variables: 

		bounds: 	380@178 corner: 620@462

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ToggleMenuIt...etc...

		fullBounds: 	380@178 corner: 620@462

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (756547584) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	an AmberObjectMirrorInspector

		selectedItem: 	a ToggleMenuItemMorph(80740352)'Inspect (i)'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(80740352)'Inspect (i)' a ...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		focusHolder: 	a MenuMorph(741605376)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	423@192 corner: 439@208

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	423@192 corner: 439@208

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(624951296)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[423@192 423@192 mouseMove 107658031 nil]

		targetOffset: 	38@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107658031 423 192 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(395575296) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[423@192 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(395575296) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		focusHolder: 	a MenuMorph(741605376)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	423@192 corner: 439@208

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	423@192 corner: 439@208

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(624951296)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[423@192 423@192 mouseMove 107658031 nil]

		targetOffset: 	38@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107658031 423 192 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		focusHolder: 	a MenuMorph(741605376)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	423@192 corner: 439@208

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	423@192 corner: 439@208

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(624951296)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[423@192 423@192 mouseMove 107658031 nil]

		targetOffset: 	38@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107658031 423 192 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]

	Receiver's instance variables: 

		bounds: 	423@192 corner: 439@208

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	423@192 corner: 439@208

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(624951296)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[423@192 423@192 mouseMove 107658031 nil]

		targetOffset: 	38@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107658031 423 192 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>handleEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[423@192 mouseUp 107658265 nil]
		evt: 	[423@192 mouseUp 107658265 nil]
		ofs: 	nil

	Receiver's instance variables: 

		bounds: 	423@192 corner: 439@208

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	423@192 corner: 439@208

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(624951296)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[423@192 423@192 mouseMove 107658031 nil]

		targetOffset: 	38@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107658031 423 192 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





HandMorph>>processEvents

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		evt: 	[423@192 mouseUp 107658265 nil]
		evtBuf: 	#(1 107658265 423 192 0 0 1 1)
		type: 	1
		hadAny: 	false

	Receiver's instance variables: 

		bounds: 	423@192 corner: 439@208

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	423@192 corner: 439@208

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(624951296)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[423@192 423@192 mouseMove 107658031 nil]

		targetOffset: 	38@9

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 107658031 423 192 0 0 0 1)

		lastKeyScanCode: 	83

		combinedChar: 	nil





[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		h: 	a HandMorph(843055104)

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(395575296))(a PreDebu...etc...

		lastStepTime: 	292426

		lastStepMessage: 	nil

		lastCycleTime: 	292471

		alarms: 	a Heap()

		lastAlarmTime: 	292426

		menuBuilder: 	a PragmaMenuBuilder





Array(SequenceableCollection)>>do:

	Receiver: an Array(a HandMorph(843055104))

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1

	Receiver's instance variables: 

an Array(a HandMorph(843055104))



WorldState>>handsDo:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(395575296))(a PreDebu...etc...

		lastStepTime: 	292426

		lastStepMessage: 	nil

		lastCycleTime: 	292471

		alarms: 	a Heap()

		lastAlarmTime: 	292426

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(395575296))(a PreDebu...etc...

		lastStepTime: 	292426

		lastStepMessage: 	nil

		lastCycleTime: 	292471

		alarms: 	a Heap()

		lastAlarmTime: 	292426

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(395575296))(a PreDebu...etc...

		lastStepTime: 	292426

		lastStepMessage: 	nil

		lastCycleTime: 	292471

		alarms: 	a Heap()

		lastAlarmTime: 	292426

		menuBuilder: 	a PragmaMenuBuilder





PasteUpMorph>>doOneCycle

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(395575296) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

	Receiver: Project

	Arguments and temporary variables: 



	Receiver's instance variables: 

		superclass: 	Model

		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...

		format: 	132

		instanceVariables: 	nil

		organization: 	('*sound' beep)


		subclasses: 	nil

		name: 	#Project

		classPool: 	a Dictionary(#UIProcess->a Process in nil )

		sharedPools: 	nil

		environment: 	a SystemDictionary(lots of globals)

		category: 	#'System-Support'

		traitComposition: 	{}

		localSelectors: 	nil





[self value.
	Processor terminateActive] in BlockClosure>>newProcess

	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		outerContext: 	Project class>>spawnNewProcess

		startpc: 	57

		numArgs: 	0







--- The full stack ---

AmberObjectMirror>>halt

AmberObjectMirror>>updateContents

AmberObjectMirrorInspector>>inspectSelection

AmberObjectMirrorInspector(Object)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 2:29:01 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	5205
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSocket

Connec...etc...
		n: 	24
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	71

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	952

		outNextToWrite: 	25

		lastRead: 	951

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	71

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	952

		outNextToWrite: 	25

		lastRead: 	951

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		socket: 	WebSocket07(127.0.0.1:62963)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1006108672)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[255@130 mouseUp 109434156 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	201@124 corner: 311@138

		owner: 	a MenuMorph(870055936)

		submorphs: 	#()

		fullBounds: 	201@124 corner: 311@138

		color: 	Color black

		extension: 	a MorphExtension (959184896)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[255@130 mouseUp 109434156 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	201@124 corner: 311@138

		owner: 	a MenuMorph(870055936)

		submorphs: 	#()

		fullBounds: 	201@124 corner: 311@138

		color: 	Color black

		extension: 	a MorphExtension (959184896)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[255@130 mouseUp 109434156 nil]

	Receiver's instance variables: 

		bounds: 	201@124 corner: 311@138

		owner: 	a MenuMorph(870055936)

		submorphs: 	#()

		fullBounds: 	201@124 corner: 311@138

		color: 	Color black

		extension: 	a MorphExtension (959184896)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]

	Receiver's instance variables: 

		bounds: 	201@124 corner: 311@138

		owner: 	a MenuMorph(870055936)

		submorphs: 	#()

		fullBounds: 	201@124 corner: 311@138

		color: 	Color black

		extension: 	a MorphExtension (959184896)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [255@130 mouseUp 109434156 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	109434156

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	255@130

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]

	Receiver's instance variables: 

		bounds: 	201@124 corner: 311@138

		owner: 	a MenuMorph(870055936)

		submorphs: 	#()

		fullBounds: 	201@124 corner: 311@138

		color: 	Color black

		extension: 	a MorphExtension (959184896)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		aMorph: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		aMorph: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(948961280)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	201@124 corner: 311@138

		owner: 	a MenuMorph(870055936)

		submorphs: 	#()

		fullBounds: 	201@124 corner: 311@138

		color: 	Color black

		extension: 	a MorphExtension (959184896)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		aMorph: 	a MenuMorph(870055936)
		localEvt: 	[255@130 mouseUp 109434156 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(786169856)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		aMorph: 	a MenuMorph(870055936)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(870055936)

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	196@81 corner: 316@259

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(786169856)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	196@81 corner: 316@259

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (884998144) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(786169856)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(870055936)

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]

	Receiver's instance variables: 

		bounds: 	196@81 corner: 316@259

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(786169856)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	196@81 corner: 316@259

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (884998144) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(786169856)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(870055936)

	Arguments and temporary variables: 

		evt: 	[255@130 mouseUp 109434156 nil]

	Receiver's instance variables: 

		bounds: 	196@81 corner: 316@259

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(786169856)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	196@81 corner: 316@259

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (884998144) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(948961280)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(786169856)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		focusHolder: 	a MenuMorph(870055936)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	255@130 corner: 271@146

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	255@130 corner: 271@146

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(902037504)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[255@130 255@130 mouseMove 109434078 nil]

		targetOffset: 	54@6

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 109434078 255 130 0 0 0 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(592183296) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[255@130 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(592183296) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		focusHolder: 	a MenuMorph(870055936)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	255@130 corner: 271@146

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	255@130 corner: 271@146

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(902037504)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[255@130 255@130 mouseMove 109434078 nil]

		targetOffset: 	54@6

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 109434078 255 130 0 0 0 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]
		focusHolder: 	a MenuMorph(870055936)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	255@130 corner: 271@146

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	255@130 corner: 271@146

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(902037504)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[255@130 255@130 mouseMove 109434078 nil]

		targetOffset: 	54@6

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 109434078 255 130 0 0 0 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[255@130 mouseUp 109434156 nil]

	Receiver's instance variables: 

		bounds: 	255@130 corner: 271@146

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	255@130 corner: 271@146

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(902037504)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[255@130 255@130 mouseMove 109434078 nil]

		targetOffset: 	54@6

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 109434078 255 130 0 0 0 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

PluggableTextMorph(ScrollPane)>>mouseDown:

PluggableTextMorph(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

PluggableTextMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 3:54:07 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	8174
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSocket

Connec...etc...
		n: 	24
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[90 127 63 82 0 0 0 0 208 145 6 11]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	71

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	952

		outNextToWrite: 	25

		lastRead: 	951

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	71

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newint x: 2 y: 3) y: 4.Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	952

		outNextToWrite: 	25

		lastRead: 	951

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:62963)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:62963'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		socket: 	WebSocket07(127.0.0.1:62963)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1006108672)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[219@114 mouseUp 4670734 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	172@107 corner: 282@121

		owner: 	a MenuMorph(473432064)

		submorphs: 	#()

		fullBounds: 	172@107 corner: 282@121

		color: 	Color black

		extension: 	a MorphExtension (562561024)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[219@114 mouseUp 4670734 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	172@107 corner: 282@121

		owner: 	a MenuMorph(473432064)

		submorphs: 	#()

		fullBounds: 	172@107 corner: 282@121

		color: 	Color black

		extension: 	a MorphExtension (562561024)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[219@114 mouseUp 4670734 nil]

	Receiver's instance variables: 

		bounds: 	172@107 corner: 282@121

		owner: 	a MenuMorph(473432064)

		submorphs: 	#()

		fullBounds: 	172@107 corner: 282@121

		color: 	Color black

		extension: 	a MorphExtension (562561024)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]

	Receiver's instance variables: 

		bounds: 	172@107 corner: 282@121

		owner: 	a MenuMorph(473432064)

		submorphs: 	#()

		fullBounds: 	172@107 corner: 282@121

		color: 	Color black

		extension: 	a MorphExtension (562561024)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [219@114 mouseUp 4670734 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	4670734

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	219@114

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]

	Receiver's instance variables: 

		bounds: 	172@107 corner: 282@121

		owner: 	a MenuMorph(473432064)

		submorphs: 	#()

		fullBounds: 	172@107 corner: 282@121

		color: 	Color black

		extension: 	a MorphExtension (562561024)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		aMorph: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		aMorph: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(552337408)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	172@107 corner: 282@121

		owner: 	a MenuMorph(473432064)

		submorphs: 	#()

		fullBounds: 	172@107 corner: 282@121

		color: 	Color black

		extension: 	a MorphExtension (562561024)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		aMorph: 	a MenuMorph(473432064)
		localEvt: 	[219@114 mouseUp 4670734 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(389545984)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		aMorph: 	a MenuMorph(473432064)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(473432064)

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	167@64 corner: 287@242

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(389545984)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	167@64 corner: 287@242

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (488374272) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(389545984)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(473432064)

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]

	Receiver's instance variables: 

		bounds: 	167@64 corner: 287@242

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(389545984)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	167@64 corner: 287@242

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (488374272) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(389545984)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(473432064)

	Arguments and temporary variables: 

		evt: 	[219@114 mouseUp 4670734 nil]

	Receiver's instance variables: 

		bounds: 	167@64 corner: 287@242

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(389545984)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	167@64 corner: 287@242

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (488374272) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(552337408)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(389545984)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		focusHolder: 	a MenuMorph(473432064)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	219@114 corner: 235@130

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	219@114 corner: 235@130

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(452460544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[219@114 mouseUp 4670734 nil]

		targetOffset: 	47@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4670734 219 114 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(142606336) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[219@114 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(142606336) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		focusHolder: 	a MenuMorph(473432064)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	219@114 corner: 235@130

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	219@114 corner: 235@130

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(452460544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[219@114 mouseUp 4670734 nil]

		targetOffset: 	47@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4670734 219 114 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]
		focusHolder: 	a MenuMorph(473432064)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	219@114 corner: 235@130

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	219@114 corner: 235@130

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(452460544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[219@114 mouseUp 4670734 nil]

		targetOffset: 	47@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4670734 219 114 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[219@114 mouseUp 4670734 nil]

	Receiver's instance variables: 

		bounds: 	219@114 corner: 235@130

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	219@114 corner: 235@130

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(452460544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[219@114 mouseUp 4670734 nil]

		targetOffset: 	47@7

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4670734 219 114 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

PluggableTextMorph(ScrollPane)>>mouseDown:

PluggableTextMorph(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

PluggableTextMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

PrimitiveFailed: primitive #primSocketSendDone: in a Socket[invalidSocketHandle] failed

17 September 2013 3:58:29 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



Socket(Object)>>primitiveFailed:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		selector: 	#primSocketSendDone:

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket(Object)>>primitiveFailed

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>primSocketSendDone:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		socketID: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>waitForSendDoneFor:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		timeout: 	45
		startTime: 	7864
		msecsDelta: 	45000
		msecsEllapsed: 	nil
		sendDone: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:for:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newProtocol Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24
		aTimeoutInSeconds: 	45
		bytesSent: 	nil

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendSomeData:startIndex:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		aStringOrByteArray: 	'inspectIt#Compiler newProtocol Handshake

Upgrade: WebSo...etc...
		startIndex: 	1
		count: 	24

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





Socket>>sendData:count:

	Receiver: a Socket[invalidSocketHandle]

	Arguments and temporary variables: 

		buffer: 	'inspectIt#Compiler newProtocol Handshake

Upgrade: WebSocket

Connec...etc...
		n: 	24
		sent: 	0

	Receiver's instance variables: 

		semaphore: 	a Semaphore()

		socketHandle: 	#[198 41 71 0 0 0 0 0 192 54 108 0]

		readSemaphore: 	a Semaphore(a Process in [self schedule.
	beingWaitedOn
		ifTrue...etc...

		writeSemaphore: 	a Semaphore()





[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	432

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newProtocol Handshake

Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	895

		outNextToWrite: 	25

		lastRead: 	894

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





BlockClosure>>on:do:

	Receiver: [socket sendData: outBuffer count: outNextToWrite - 1]

	Arguments and temporary variables: 

		exception: 	ConnectionTimedOut
		handlerAction: 	[:ex | shouldSignal
		ifTrue: []]
		handlerActive: 	true

	Receiver's instance variables: 

		outerContext: 	SocketStream>>flush

		startpc: 	60

		numArgs: 	0





SocketStream>>flush

	Receiver: SocketStream[inbuf:4kb/outbuf:4kb]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		recentlyRead: 	432

		socket: 	a Socket[invalidSocketHandle]

		inBuffer: 	'GET /broadcast HTTP/1.1

Upgrade: websocket

Connection: Upgrade

Ho...etc...

		outBuffer: 	'inspectIt#Compiler newProtocol Handshake

Upgrade: WebSocket

Con...etc...

		inNextToWrite: 	895

		outNextToWrite: 	25

		lastRead: 	894

		timeout: 	3000

		autoFlush: 	true

		bufferSize: 	4096

		binary: 	false

		shouldSignal: 	true





WebSocket07>>send:code:final:mask:

	Receiver: WebSocket07(127.0.0.1:52805)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true
		doMask: 	false
		byte1: 	129
		byte2: 	22
		mask: 	nil
		xLength: 	#[]
		copy: 	'inspectIt#Compiler new'
		i: 	nil

	Receiver's instance variables: 

		name: 	'127.0.0.1:52805'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:final:

	Receiver: WebSocket07(127.0.0.1:52805)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1
		isFinal: 	true

	Receiver's instance variables: 

		name: 	'127.0.0.1:52805'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:code:

	Receiver: WebSocket07(127.0.0.1:52805)

	Arguments and temporary variables: 

		data: 	'inspectIt#Compiler new'
		opcode: 	1

	Receiver's instance variables: 

		name: 	'127.0.0.1:52805'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





WebSocket07>>send:

	Receiver: WebSocket07(127.0.0.1:52805)

	Arguments and temporary variables: 

		aStringOrBytes: 	'inspectIt#Compiler new'

	Receiver's instance variables: 

		name: 	'127.0.0.1:52805'

		process: 	nil

		stream: 	SocketStream[inbuf:4kb/outbuf:4kb]

		handlers: 	a Dictionary('close'->[self disconnectHandler: ws] 'error'->[:ex | se...etc...

		frameType: 	nil

		frameData: 	nil

		closing: 	false

		masking: 	false





ToolAmberWorkspace>>inspectIt

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		socket: 	WebSocket07(127.0.0.1:52805)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

	Receiver: a ToolAmberWorkspace

	Arguments and temporary variables: 

		selector: 	#inspectIt
		otherTarget: 	a PluggableTextMorph(1006108672)

	Receiver's instance variables: 

		dependents: 	a DependentsArray(a SystemWindow(328466432) a PluggableTextMorph(10...etc...

		contents: 	a Text for 'Compiler new'

		bindings: 	nil

		acceptDroppedMorphs: 	false

		acceptAction: 	nil

		mustDeclareVariables: 	false

		fileName: 	nil

		lineEnding: 	#crlf

		encoding: 	'utf-8'

		stylingActive: 	true

		client: 	an ObjectAmberClient





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[242@136 mouseUp 4932906 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	198@132 corner: 308@146

		owner: 	a MenuMorph(545521664)

		submorphs: 	#()

		fullBounds: 	198@132 corner: 308@146

		color: 	Color black

		extension: 	a MorphExtension (689700864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[242@136 mouseUp 4932906 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	198@132 corner: 308@146

		owner: 	a MenuMorph(545521664)

		submorphs: 	#()

		fullBounds: 	198@132 corner: 308@146

		color: 	Color black

		extension: 	a MorphExtension (689700864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Arguments and temporary variables: 

		evt: 	[242@136 mouseUp 4932906 nil]

	Receiver's instance variables: 

		bounds: 	198@132 corner: 308@146

		owner: 	a MenuMorph(545521664)

		submorphs: 	#()

		fullBounds: 	198@132 corner: 308@146

		color: 	Color black

		extension: 	a MorphExtension (689700864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]

	Receiver's instance variables: 

		bounds: 	198@132 corner: 308@146

		owner: 	a MenuMorph(545521664)

		submorphs: 	#()

		fullBounds: 	198@132 corner: 308@146

		color: 	Color black

		extension: 	a MorphExtension (689700864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [242@136 mouseUp 4932906 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Receiver's instance variables: 

		timeStamp: 	4932906

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	242@136

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]

	Receiver's instance variables: 

		bounds: 	198@132 corner: 308@146

		owner: 	a MenuMorph(545521664)

		submorphs: 	#()

		fullBounds: 	198@132 corner: 308@146

		color: 	Color black

		extension: 	a MorphExtension (689700864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		aMorph: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		aMorph: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(679477248)'Inspect it on...'

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	198@132 corner: 308@146

		owner: 	a MenuMorph(545521664)

		submorphs: 	#()

		fullBounds: 	198@132 corner: 308@146

		color: 	Color black

		extension: 	a MorphExtension (689700864)

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect it on...'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	a ToolAmberWorkspace

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectIt a PluggableTextMorph(1006108672))

		icon: 	Form(16x1x8)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		aMorph: 	a MenuMorph(545521664)
		localEvt: 	[242@136 mouseUp 4932906 nil]
		index: 	3
		child: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'
		morphs: 	an Array(a ToggleMenuItemMorph(516685824)'Do it on...' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		aMorph: 	a MenuMorph(545521664)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(545521664)

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	193@89 corner: 313@267

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(516685824)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	193@89 corner: 313@267

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (560463872) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(516685824)'Do it on...' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(545521664)

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]

	Receiver's instance variables: 

		bounds: 	193@89 corner: 313@267

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(516685824)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	193@89 corner: 313@267

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (560463872) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(516685824)'Do it on...' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(545521664)

	Arguments and temporary variables: 

		evt: 	[242@136 mouseUp 4932906 nil]

	Receiver's instance variables: 

		bounds: 	193@89 corner: 313@267

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(516685824)'Do it on...' a ToggleMenuI...etc...

		fullBounds: 	193@89 corner: 313@267

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (560463872) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	a ToolAmberWorkspace

		selectedItem: 	a ToggleMenuItemMorph(679477248)'Inspect it on...'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(516685824)'Do it on...' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		focusHolder: 	a MenuMorph(545521664)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	242@136 corner: 258@152

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	242@136 corner: 258@152

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(223870976)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[242@136 mouseUp 4932906 nil]

		targetOffset: 	44@4

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4932906 242 136 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(600309760) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[242@136 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(600309760) a Sys...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		focusHolder: 	a MenuMorph(545521664)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	242@136 corner: 258@152

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	242@136 corner: 258@152

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(223870976)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[242@136 mouseUp 4932906 nil]

		targetOffset: 	44@4

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4932906 242 136 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]
		focusHolder: 	a MenuMorph(545521664)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	242@136 corner: 258@152

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	242@136 corner: 258@152

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(223870976)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[242@136 mouseUp 4932906 nil]

		targetOffset: 	44@4

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4932906 242 136 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[242@136 mouseUp 4932906 nil]

	Receiver's instance variables: 

		bounds: 	242@136 corner: 258@152

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	242@136 corner: 258@152

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(223870976)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[242@136 mouseUp 4932906 nil]

		targetOffset: 	44@4

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 4932906 242 136 0 0 1 1)

		lastKeyScanCode: 	1

		combinedChar: 	nil







--- The full stack ---

Socket(Object)>>primitiveFailed:

Socket(Object)>>primitiveFailed

Socket>>primSocketSendDone:

Socket>>waitForSendDoneFor:

Socket>>sendSomeData:startIndex:count:for:

Socket>>sendSomeData:startIndex:count:

Socket>>sendData:count:

[socket sendData: outBuffer count: outNextToWrite - 1] in SocketStream>>flush

BlockClosure>>on:do:

SocketStream>>flush

WebSocket07>>send:code:final:mask:

WebSocket07>>send:code:final:

WebSocket07>>send:code:

WebSocket07>>send:

ToolAmberWorkspace>>inspectIt

ToolAmberWorkspace(StringHolder)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

WorldState>>doOneSubCycleFor:

PasteUpMorph>>doOneSubCycle

MenuMorph>>invokeModalAt:in:allowKeyboard:

MenuMorph>>invokeModal:

MenuMorph>>invokeModal

PluggableTextMorph>>yellowButtonActivity:

PluggableTextMorph(ScrollPane)>>mouseDown:

PluggableTextMorph(Morph)>>handleMouseDown:

MouseButtonEvent>>sentTo:

PluggableTextMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PluggableTextMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

SystemWindow(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchMouseDown:with:

MorphicEventDispatcher>>dispatchEvent:with:

PasteUpMorph(Morph)>>processEvent:using:

PasteUpMorph>>processEvent:using:

PasteUpMorph(Morph)>>processEvent:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



THERE_BE_DRAGONS_HERE

MessageNotUnderstood: ByteString>>requestInspect

17 September 2013 5:24 pm



VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog-EstebanLorenzano.161]

Image: Pharo1.3 [Latest update: #13315]



ByteString(Object)>>doesNotUnderstand: #requestInspect

	Receiver: 'id: 	an AmberObjectMirror(nil)
'

	Arguments and temporary variables: 

		aMessage: 	requestInspect
		exception: 	MessageNotUnderstood: ByteString>>requestInspect
		resumeValue: 	nil

	Receiver's instance variables: 

'id: 	an AmberObjectMirror(nil)
'



AmberObjectMirrorInspector>>inspectSelection

	Receiver: an AmberObjectMirrorInspector

	Arguments and temporary variables: 



	Receiver's instance variables: 

		contents: 	'id: 	an AmberObjectMirror(nil)
'

		object: 	an AmberObjectMirror(8)

		selectionIndex: 	2

		timeOfLastListUpdate: 	5132722

		selectionUpdateTime: 	0





AmberObjectMirrorInspector(Object)>>perform:orSendTo:

	Receiver: an AmberObjectMirrorInspector

	Arguments and temporary variables: 

		selector: 	#inspectSelection
		otherTarget: 	a PluggableListMorph(580386816)

	Receiver's instance variables: 

		contents: 	'id: 	an AmberObjectMirror(nil)
'

		object: 	an AmberObjectMirror(8)

		selectionIndex: 	2

		timeOfLastListUpdate: 	5132722

		selectionUpdateTime: 	0





[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Arguments and temporary variables: 

		evt: 	[256@310 mouseUp 10064250 nil]
		selArgCount: 	2

	Receiver's instance variables: 

		bounds: 	242@300 corner: 472@318

		owner: 	a MenuMorph(421789696)

		submorphs: 	#()

		fullBounds: 	242@300 corner: 472@318

		color: 	Color black

		extension: 	a MorphExtension (844890112) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(580386816))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





BlockClosure>>ensure:

	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...

	Arguments and temporary variables: 

		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil

	Receiver's instance variables: 

		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

		startpc: 	156

		numArgs: 	0





CursorWithMask(Cursor)>>showWhile:

	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...

	Arguments and temporary variables: 

		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...

	Receiver's instance variables: 

		bits: 	a Bitmap of length 16

		width: 	16

		height: 	16

		depth: 	1

		offset: 	-1@ -1

		maskForm: 	Form(16x16x1)





ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

	Receiver: a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Arguments and temporary variables: 

		evt: 	[256@310 mouseUp 10064250 nil]
		w: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		bounds: 	242@300 corner: 472@318

		owner: 	a MenuMorph(421789696)

		submorphs: 	#()

		fullBounds: 	242@300 corner: 472@318

		color: 	Color black

		extension: 	a MorphExtension (844890112) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(580386816))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

	Receiver: a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Arguments and temporary variables: 

		evt: 	[256@310 mouseUp 10064250 nil]

	Receiver's instance variables: 

		bounds: 	242@300 corner: 472@318

		owner: 	a MenuMorph(421789696)

		submorphs: 	#()

		fullBounds: 	242@300 corner: 472@318

		color: 	Color black

		extension: 	a MorphExtension (844890112) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(580386816))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

	Receiver: a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]

	Receiver's instance variables: 

		bounds: 	242@300 corner: 472@318

		owner: 	a MenuMorph(421789696)

		submorphs: 	#()

		fullBounds: 	242@300 corner: 472@318

		color: 	Color black

		extension: 	a MorphExtension (844890112) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(580386816))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MouseButtonEvent>>sentTo:

	Receiver: [256@310 mouseUp 10064250 nil]

	Arguments and temporary variables: 

		anObject: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Receiver's instance variables: 

		timeStamp: 	10064250

		source: 	a HandMorph(843055104)

		windowIndex: 	nil

		type: 	#mouseUp

		buttons: 	0

		position: 	256@310

		handler: 	nil

		wasHandled: 	true

		whichButton: 	4





ToggleMenuItemMorph(Morph)>>handleEvent:

	Receiver: a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]

	Receiver's instance variables: 

		bounds: 	242@300 corner: 472@318

		owner: 	a MenuMorph(421789696)

		submorphs: 	#()

		fullBounds: 	242@300 corner: 472@318

		color: 	Color black

		extension: 	a MorphExtension (844890112) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(580386816))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		aMorph: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		aMorph: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





ToggleMenuItemMorph(Morph)>>processEvent:using:

	Receiver: a ToggleMenuItemMorph(834666496)'Inspect (i)'

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	242@300 corner: 472@318

		owner: 	a MenuMorph(421789696)

		submorphs: 	#()

		fullBounds: 	242@300 corner: 472@318

		color: 	Color black

		extension: 	a MorphExtension (844890112) [balloonText] 

		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)

		emphasis: 	0

		contents: 	'Inspect (i)'

		hasFocus: 	false

		isEnabled: 	true

		subMenu: 	nil

		isSelected: 	false

		target: 	an AmberObjectMirrorInspector

		selector: 	#perform:orSendTo:

		arguments: 	an Array(#inspectSelection a PluggableListMorph(580386816))

		icon: 	Form(16x16x32)

		getStateSelector: 	nil

		enablementSelector: 	nil

		keyText: 	nil





MorphicEventDispatcher>>dispatchDefault:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		aMorph: 	a MenuMorph(421789696)
		localEvt: 	[256@310 mouseUp 10064250 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'
		morphs: 	an Array(a ToggleMenuItemMorph(834666496)'Inspect (i)' a ToggleMenuItem...etc...
		inside: 	false

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MorphicEventDispatcher>>dispatchEvent:with:

	Receiver: a MorphicEventDispatcher

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		aMorph: 	a MenuMorph(421789696)

	Receiver's instance variables: 

		lastType: 	#mouseUp

		lastDispatch: 	#dispatchDefault:with:





MenuMorph(Morph)>>processEvent:using:

	Receiver: a MenuMorph(421789696)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		defaultDispatcher: 	a MorphicEventDispatcher

	Receiver's instance variables: 

		bounds: 	237@295 corner: 477@579

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(834666496)'Inspect (i)' a ToggleMenuI...etc...

		fullBounds: 	237@295 corner: 477@579

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (436731904) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	an AmberObjectMirrorInspector

		selectedItem: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(834666496)'Inspect (i)' a...etc...





MenuMorph(Morph)>>processEvent:

	Receiver: a MenuMorph(421789696)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]

	Receiver's instance variables: 

		bounds: 	237@295 corner: 477@579

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(834666496)'Inspect (i)' a ToggleMenuI...etc...

		fullBounds: 	237@295 corner: 477@579

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (436731904) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	an AmberObjectMirrorInspector

		selectedItem: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(834666496)'Inspect (i)' a...etc...





MenuMorph>>handleFocusEvent:

	Receiver: a MenuMorph(421789696)

	Arguments and temporary variables: 

		evt: 	[256@310 mouseUp 10064250 nil]

	Receiver's instance variables: 

		bounds: 	237@295 corner: 477@579

		owner: 	nil

		submorphs: 	an Array(a ToggleMenuItemMorph(834666496)'Inspect (i)' a ToggleMenuI...etc...

		fullBounds: 	237@295 corner: 477@579

		color: 	(Color r: 0.848 g: 0.848 b: 0.848)

		extension: 	a MorphExtension (436731904) [other:  (basicColor -> (Color r: 0.745...etc...

		borderWidth: 	2

		borderColor: 	(Color r: 0.595 g: 0.595 b: 0.595)

		defaultTarget: 	an AmberObjectMirrorInspector

		selectedItem: 	a ToggleMenuItemMorph(834666496)'Inspect (i)'

		stayUp: 	false

		popUpOwner: 	nil

		activeSubMenu: 	nil

		activatorDockingBar: 	nil

		embeddable: 	nil

		menuItems: 	an OrderedCollection(a ToggleMenuItemMorph(834666496)'Inspect (i)' a...etc...





[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		focusHolder: 	a MenuMorph(421789696)
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	256@310 corner: 272@326

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	256@310 corner: 272@326

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(288620544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[256@310 256@310 mouseMove 10064046 nil]

		targetOffset: 	14@10

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 10064046 256 310 0 0 0 1)

		lastKeyScanCode: 	8

		combinedChar: 	nil





[aBlock value] in PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1049362432) a Sy...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





BlockClosure>>on:do:

	Receiver: [aBlock value]

	Arguments and temporary variables: 

		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false

	Receiver's instance variables: 

		outerContext: 	PasteUpMorph>>becomeActiveDuring:

		startpc: 	67

		numArgs: 	0





PasteUpMorph>>becomeActiveDuring:

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 

		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[256@310 mouseOver red nil nil]

	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1049362432) a Sy...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





HandMorph>>sendFocusEvent:to:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		focusHolder: 	a MenuMorph(421789696)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)

	Receiver's instance variables: 

		bounds: 	256@310 corner: 272@326

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	256@310 corner: 272@326

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(288620544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[256@310 256@310 mouseMove 10064046 nil]

		targetOffset: 	14@10

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 10064046 256 310 0 0 0 1)

		lastKeyScanCode: 	8

		combinedChar: 	nil





HandMorph>>sendEvent:focus:clear:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		focusHolder: 	a MenuMorph(421789696)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil

	Receiver's instance variables: 

		bounds: 	256@310 corner: 272@326

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	256@310 corner: 272@326

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(288620544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[256@310 256@310 mouseMove 10064046 nil]

		targetOffset: 	14@10

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 10064046 256 310 0 0 0 1)

		lastKeyScanCode: 	8

		combinedChar: 	nil





HandMorph>>sendMouseEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]

	Receiver's instance variables: 

		bounds: 	256@310 corner: 272@326

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	256@310 corner: 272@326

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(288620544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[256@310 256@310 mouseMove 10064046 nil]

		targetOffset: 	14@10

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 10064046 256 310 0 0 0 1)

		lastKeyScanCode: 	8

		combinedChar: 	nil





HandMorph>>handleEvent:

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		anEvent: 	[256@310 mouseUp 10064250 nil]
		evt: 	[256@310 mouseUp 10064250 nil]
		ofs: 	nil

	Receiver's instance variables: 

		bounds: 	256@310 corner: 272@326

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	256@310 corner: 272@326

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(288620544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[256@310 256@310 mouseMove 10064046 nil]

		targetOffset: 	14@10

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 10064046 256 310 0 0 0 1)

		lastKeyScanCode: 	8

		combinedChar: 	nil





HandMorph>>processEvents

	Receiver: a HandMorph(843055104)

	Arguments and temporary variables: 

		evt: 	[256@310 mouseUp 10064250 nil]
		evtBuf: 	#(1 10064250 256 310 0 0 1 1)
		type: 	1
		hadAny: 	false

	Receiver's instance variables: 

		bounds: 	256@310 corner: 272@326

		owner: 	a PasteUpMorph(425197568) [world]

		submorphs: 	#()

		fullBounds: 	256@310 corner: 272@326

		color: 	Color blue

		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 

		mouseFocus: 	nil

		keyboardFocus: 	a PluggableButtonMorph(288620544)

		eventListeners: 	nil

		mouseListeners: 	nil

		keyboardListeners: 	nil

		mouseClickState: 	nil

		mouseOverHandler: 	a MouseOverHandler

		lastMouseEvent: 	[256@310 256@310 mouseMove 10064046 nil]

		targetOffset: 	14@10

		damageRecorder: 	a DamageRecorder

		cacheCanvas: 	nil

		cachedCanvasHasHoles: 	true

		temporaryCursor: 	nil

		temporaryCursorOffset: 	nil

		hardwareCursor: 	nil

		hasChanged: 	true

		savedPatch: 	nil

		userInitials: 	''

		lastEventBuffer: 	#(1 10064046 256 310 0 0 0 1)

		lastKeyScanCode: 	8

		combinedChar: 	nil





[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		h: 	a HandMorph(843055104)

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...

		lastStepTime: 	5139178

		lastStepMessage: 	nil

		lastCycleTime: 	5139218

		alarms: 	a Heap()

		lastAlarmTime: 	5139178

		menuBuilder: 	a PragmaMenuBuilder





Array(SequenceableCollection)>>do:

	Receiver: an Array(a HandMorph(843055104))

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1

	Receiver's instance variables: 

an Array(a HandMorph(843055104))



WorldState>>handsDo:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...

		lastStepTime: 	5139178

		lastStepMessage: 	nil

		lastCycleTime: 	5139218

		alarms: 	a Heap()

		lastAlarmTime: 	5139178

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleNowFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...

		lastStepTime: 	5139178

		lastStepMessage: 	nil

		lastCycleTime: 	5139218

		alarms: 	a Heap()

		lastAlarmTime: 	5139178

		menuBuilder: 	a PragmaMenuBuilder





WorldState>>doOneCycleFor:

	Receiver: a WorldState

	Arguments and temporary variables: 

		aWorld: 	a PasteUpMorph(425197568) [world]

	Receiver's instance variables: 

		hands: 	an Array(a HandMorph(843055104))

		viewBox: 	0@0 corner: 1280@689

		canvas: 	a FormCanvas on: DisplayScreen(1280x689x32)

		damageRecorder: 	a DamageRecorder

		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(1049362432))(a PreDeb...etc...

		lastStepTime: 	5139178

		lastStepMessage: 	nil

		lastCycleTime: 	5139218

		alarms: 	a Heap()

		lastAlarmTime: 	5139178

		menuBuilder: 	a PragmaMenuBuilder





PasteUpMorph>>doOneCycle

	Receiver: a PasteUpMorph(425197568) [world]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		bounds: 	0@0 corner: 1280@689

		owner: 	nil

		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1049362432) a Sy...etc...

		fullBounds: 	nil

		color: 	(Color r: 0.97 g: 0.98 b: 1.0)

		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...

		borderWidth: 	0

		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)

		backgroundMorph: 	nil

		worldState: 	a WorldState

		griddingOn: 	nil





[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

	Receiver: Project

	Arguments and temporary variables: 



	Receiver's instance variables: 

		superclass: 	Model

		methodDict: 	a MethodDictionary(#beep->(Project>>#beep "a CompiledMethod(7072645...etc...

		format: 	132

		instanceVariables: 	nil

		organization: 	('*sound' beep)


		subclasses: 	nil

		name: 	#Project

		classPool: 	a Dictionary(#UIProcess->a Process in nil )

		sharedPools: 	nil

		environment: 	a SystemDictionary(lots of globals)

		category: 	#'System-Support'

		traitComposition: 	{}

		localSelectors: 	nil





[self value.
	Processor terminateActive] in BlockClosure>>newProcess

	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]

	Arguments and temporary variables: 



	Receiver's instance variables: 

		outerContext: 	Project class>>spawnNewProcess

		startpc: 	57

		numArgs: 	0







--- The full stack ---

ByteString(Object)>>doesNotUnderstand: #requestInspect

AmberObjectMirrorInspector>>inspectSelection

AmberObjectMirrorInspector(Object)>>perform:orSendTo:

[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

BlockClosure>>ensure:

CursorWithMask(Cursor)>>showWhile:

ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:

ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:

ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:

MouseButtonEvent>>sentTo:

ToggleMenuItemMorph(Morph)>>handleEvent:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

ToggleMenuItemMorph(Morph)>>processEvent:using:

MorphicEventDispatcher>>dispatchDefault:with:

MorphicEventDispatcher>>dispatchEvent:with:

MenuMorph(Morph)>>processEvent:using:

MenuMorph(Morph)>>processEvent:

MenuMorph>>handleFocusEvent:

[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:

[aBlock value] in PasteUpMorph>>becomeActiveDuring:

BlockClosure>>on:do:

PasteUpMorph>>becomeActiveDuring:

HandMorph>>sendFocusEvent:to:clear:

HandMorph>>sendEvent:focus:clear:

HandMorph>>sendMouseEvent:

HandMorph>>handleEvent:

HandMorph>>processEvents

[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:

Array(SequenceableCollection)>>do:

WorldState>>handsDo:

WorldState>>doOneCycleNowFor:

WorldState>>doOneCycleFor:

PasteUpMorph>>doOneCycle

[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess

[self value.
	Processor terminateActive] in BlockClosure>>newProcess

------------------------------------------------------------



